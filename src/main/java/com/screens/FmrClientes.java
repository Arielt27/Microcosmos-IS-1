/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.screens;

import com.clases.Clientes;
import com.clases.ClientesDataSource;
import com.clases.JasperV;
import com.clases.Sexo;
import com.clases.SingletonUser;
import com.clases.TipoDocumento;
import com.clases.Usuarios;
import com.dao.ClientesJpaController;
import com.dao.EmpleadosJpaController;
import com.dao.SexoJpaController;
import com.dao.TipoDocumentoJpaController;
import com.dao.UsuariosJpaController;
import java.awt.Image;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;

/**
 *
 * @author david
 */
public class FmrClientes extends javax.swing.JFrame {

    //Se crea el Entity manager factory
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    
    
    SexoJpaController daoSexo = new SexoJpaController();        
    ClientesJpaController daoClientes = new ClientesJpaController();    
    UsuariosJpaController daoUsuarios = new UsuariosJpaController();
    EmpleadosJpaController daoEmpleados = new EmpleadosJpaController();
    TipoDocumentoJpaController daoTipoDocumento = new TipoDocumentoJpaController();
    
    //OBTENER NOMBRE DE USUARIO UTILIZANDO PATRON SINGLETON
    private Usuarios usuarios = new Usuarios(); 
    private SingletonUser singleton = SingletonUser.getUsuario(usuarios);    
    String Nombre = daoEmpleados.findEmpleados(singleton.getCuenta().getIdEmpleados()).getNombreEmpleado();              
    String Apellido = daoEmpleados.findEmpleados(singleton.getCuenta().getIdEmpleados()).getApellidoEmpleado();
    String Empleado = Nombre + " " + Apellido;
    
    //OBTENER HORA ACTUAL PARA IMPRIMIRLA EN REPORTE DE FACTURA
    Date date = new Date();
    DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss"); 
    String horaImpresion = dateFormat.format(date);
    
    ClientesDataSource dataSource;
    Clientes objCliente = new Clientes();    
    Icon icono = new ImageIcon(getClass().getResource("/imagenes/guardar.png"));
    
    //Obtener ID de Usuario para verificar permisos
    int idUsuario = daoUsuarios.findUsuarios(singleton.getCuenta().getIdUsuario()).getIdUsuario();
    
    public FmrClientes() {
        initComponents();
        this.setLocationRelativeTo(null);
        Image icon = new ImageIcon(getClass().getResource("/imagenes/IconoMicrocosmos.png")).getImage();
        setIconImage(icon);
        listaTipoDocumento();
        listaSexo();
        ActualizarCliente();
        Txt_Activo.setVisible(false);
        Btn_Limpiar.setEnabled(false);
        Btn_Editar.setEnabled(false);
        Btn_Activar_Desactivar.setEnabled(false);
        
        if(idUsuario != 1)        
            inicializarPermisos(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tbl_Clientes = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Txt_IdCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Txt_NombreCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Txt_ApellidoCliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Txt_TelefonoCliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Txt_CorreoCliente = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        Txt_DocumentoCliente = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        Txt_DireccionCliente = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        Txt_Activo = new javax.swing.JTextField();
        Btn_Imprimir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Btn_Añadir = new javax.swing.JButton();
        Btn_Editar = new javax.swing.JButton();
        Btn_Activar_Desactivar = new javax.swing.JButton();
        Btn_Limpiar = new javax.swing.JButton();
        Btn_Regresar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Clientes - Microcosmos");
        setResizable(false);

        Tbl_Clientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Apellido", "Teléfono", "Dirección", "Correo", "TipoDocumento", "Documento", "Género", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tbl_Clientes.getTableHeader().setReorderingAllowed(false);
        Tbl_Clientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tbl_ClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tbl_Clientes);
        if (Tbl_Clientes.getColumnModel().getColumnCount() > 0) {
            Tbl_Clientes.getColumnModel().getColumn(0).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(1).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(2).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(3).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(4).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(5).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(6).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(7).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(8).setResizable(false);
            Tbl_Clientes.getColumnModel().getColumn(9).setResizable(false);
        }

        jPanel1.setBackground(new java.awt.Color(49, 49, 49));
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 100));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 100));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/LogoMicrocosmos.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(60, 63, 65));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setMaximumSize(new java.awt.Dimension(180, 20));
        jPanel2.setMinimumSize(new java.awt.Dimension(180, 20));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 230));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Ingresar Datos");
        jLabel5.setMaximumSize(new java.awt.Dimension(299, 41));
        jLabel5.setPreferredSize(new java.awt.Dimension(299, 41));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("ID Cliente");
        jLabel2.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel2.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel2.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_IdCliente.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nombre Cliente");
        jLabel3.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_NombreCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_NombreClienteActionPerformed(evt);
            }
        });
        Txt_NombreCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_NombreClienteKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Apellido Cliente");
        jLabel4.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_ApellidoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_ApellidoClienteKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Teléfono Cliente");
        jLabel6.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel6.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel6.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_TelefonoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_TelefonoClienteKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Tipo Documento");
        jLabel7.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel7.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel7.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("E-mail Cliente");
        jLabel8.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel8.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel8.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_CorreoCliente.setMaximumSize(new java.awt.Dimension(180, 20));
        Txt_CorreoCliente.setMinimumSize(new java.awt.Dimension(180, 20));
        Txt_CorreoCliente.setPreferredSize(new java.awt.Dimension(180, 20));
        Txt_CorreoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_CorreoClienteKeyTyped(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        jComboBox1.setMaximumSize(new java.awt.Dimension(180, 20));
        jComboBox1.setMinimumSize(new java.awt.Dimension(180, 20));
        jComboBox1.setPreferredSize(new java.awt.Dimension(180, 20));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Documento");
        jLabel9.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel9.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel9.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_DocumentoCliente.setMaximumSize(new java.awt.Dimension(180, 20));
        Txt_DocumentoCliente.setMinimumSize(new java.awt.Dimension(180, 20));
        Txt_DocumentoCliente.setPreferredSize(new java.awt.Dimension(180, 20));
        Txt_DocumentoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_DocumentoClienteActionPerformed(evt);
            }
        });
        Txt_DocumentoCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_DocumentoClienteKeyTyped(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Dirección Cliente");
        jLabel10.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel10.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel10.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_DireccionCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_DireccionClienteKeyTyped(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Sexo");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));

        Btn_Imprimir.setText("Imprimir");
        Btn_Imprimir.setToolTipText("Imprime los datos de la tabla en un archivo PDF.");
        Btn_Imprimir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Imprimir.setFocusPainted(false);
        Btn_Imprimir.setMaximumSize(new java.awt.Dimension(70, 22));
        Btn_Imprimir.setMinimumSize(new java.awt.Dimension(70, 22));
        Btn_Imprimir.setPreferredSize(new java.awt.Dimension(70, 22));
        Btn_Imprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(249, 249, 249))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Txt_IdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_NombreCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(Txt_ApellidoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(Txt_TelefonoCliente))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Txt_CorreoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Txt_DocumentoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Txt_DireccionCliente))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Btn_Imprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_DireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_IdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Txt_NombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_CorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Txt_ApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Txt_DocumentoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_TelefonoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Btn_Imprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(17, 17, 17))
        );

        jPanel3.setBackground(new java.awt.Color(60, 63, 65));
        jPanel3.setMaximumSize(new java.awt.Dimension(800, 130));
        jPanel3.setMinimumSize(new java.awt.Dimension(800, 130));
        jPanel3.setPreferredSize(new java.awt.Dimension(800, 130));

        Btn_Añadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/anadir.png"))); // NOI18N
        Btn_Añadir.setText(" Añadir");
        Btn_Añadir.setToolTipText("Añade un nuevo cliente si los campos están correctamente rellenos.");
        Btn_Añadir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Añadir.setFocusPainted(false);
        Btn_Añadir.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_AñadirActionPerformed(evt);
            }
        });

        Btn_Editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizar.png"))); // NOI18N
        Btn_Editar.setText(" Actualizar");
        Btn_Editar.setToolTipText("Actualiza los datos de un cliente ya registrado en el sistema.");
        Btn_Editar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Editar.setFocusPainted(false);
        Btn_Editar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EditarActionPerformed(evt);
            }
        });

        Btn_Activar_Desactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/estado.png"))); // NOI18N
        Btn_Activar_Desactivar.setText(" Desactivar");
        Btn_Activar_Desactivar.setToolTipText("Activa o desactiva el cliente seleccionado.");
        Btn_Activar_Desactivar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Activar_Desactivar.setFocusPainted(false);
        Btn_Activar_Desactivar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Activar_DesactivarActionPerformed(evt);
            }
        });

        Btn_Limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        Btn_Limpiar.setText(" Limpiar");
        Btn_Limpiar.setToolTipText("Limpia los campos de ingreso de datos.");
        Btn_Limpiar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Limpiar.setFocusPainted(false);
        Btn_Limpiar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_LimpiarActionPerformed(evt);
            }
        });

        Btn_Regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/regresar.png"))); // NOI18N
        Btn_Regresar.setText(" Regresar");
        Btn_Regresar.setToolTipText("Regresa a la pantalla de Menú Principal.");
        Btn_Regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Regresar.setFocusPainted(false);
        Btn_Regresar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RegresarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Acciones");
        jLabel11.setMaximumSize(new java.awt.Dimension(265, 25));
        jLabel11.setMinimumSize(new java.awt.Dimension(265, 25));
        jLabel11.setPreferredSize(new java.awt.Dimension(265, 25));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Btn_Añadir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(Btn_Editar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(Btn_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(Btn_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(260, 260, 260))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Btn_Editar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Limpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Regresar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Añadir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Txt_NombreClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_NombreClienteKeyTyped

        char c = evt.getKeyChar();
        String Texto = Txt_NombreCliente.getText();

        if((c < 'A' || c > 'Z') && (c < 'a' || c > 'z')){

            evt.consume();

        }
              
        if (Txt_NombreCliente.getText().length() >= 20){
        
        evt.consume();
        
        }
    
         if((evt.getKeyChar() == 22)){
        
            Txt_NombreCliente.setText(Texto.substring(0, 20));
                    
        }
          
        if (Txt_NombreCliente.getText().length() == 1){

            char mayuscula = Texto.charAt(0);
            Texto = Character.toUpperCase(mayuscula)+ Texto.substring(1,Texto.length());
            Txt_NombreCliente.setText(Texto);

        }
    }//GEN-LAST:event_Txt_NombreClienteKeyTyped

    private void Btn_RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RegresarActionPerformed
        
        try{
            FmrMenú M = new FmrMenú();
            M.setVisible(true);
            this.dispose();
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+"-"+aux2+"-"+aux3+" "+fecha.get(Calendar.HOUR_OF_DAY)+" "+fecha.get(Calendar.MINUTE)+" "+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrClientes.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Clientes-BtnRegresar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_Btn_RegresarActionPerformed

    private void Btn_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_LimpiarActionPerformed
        
        try{
            LimpiarCliente();            
            Btn_Limpiar.setEnabled(false);
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+"-"+aux2+"-"+aux3+" "+fecha.get(Calendar.HOUR_OF_DAY)+" "+fecha.get(Calendar.MINUTE)+" "+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrClientes.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Clientes-BtnLimpiar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_Btn_LimpiarActionPerformed

    private void Txt_NombreClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_NombreClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_NombreClienteActionPerformed

    private void Tbl_ClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tbl_ClientesMouseClicked
     
        int fila =  Tbl_Clientes.getSelectedRow();
        if(fila == -1){
        
            JOptionPane.showMessageDialog(this, "Debe seleccionar una Fila");
        
        }else{
            if(idUsuario == 1)     
            {
            Btn_Añadir.setEnabled(false);            
            Btn_Editar.setEnabled(true);
            Btn_Activar_Desactivar.setEnabled(true);
            }                 
            Btn_Limpiar.setEnabled(true);
        
            String Id = Tbl_Clientes.getValueAt(fila, 0).toString();
            String Nombre = Tbl_Clientes.getValueAt(fila, 1).toString();
            String Apellido = Tbl_Clientes.getValueAt(fila, 2).toString();
            String Telefono = Tbl_Clientes.getValueAt(fila, 3).toString();
            String Direccion = Tbl_Clientes.getValueAt(fila, 4).toString();
            String Correo = Tbl_Clientes.getValueAt(fila, 5).toString();
            String TipoDocumento = Tbl_Clientes.getValueAt(fila, 6).toString();
            String Documento = Tbl_Clientes.getValueAt(fila, 7).toString();
            String Sexo = Tbl_Clientes.getValueAt(fila, 8).toString();
            String Activo = Tbl_Clientes.getValueAt(fila, 9).toString();
                
            Txt_IdCliente.setText(Id);
            Txt_NombreCliente.setText(Nombre);
            Txt_ApellidoCliente.setText(Apellido);
            Txt_TelefonoCliente.setText(Telefono);
            jComboBox2.setSelectedItem(Sexo);
            Txt_DireccionCliente.setText(Direccion);
            Txt_CorreoCliente.setText(Correo);
            jComboBox1.setSelectedItem(TipoDocumento);
            Txt_DocumentoCliente.setText(Documento);
            Txt_Activo.setText(Activo);
        
            if(Activo == "Activado")
            {
            Btn_Activar_Desactivar.setText("Desactivar");
            }else{       
                Btn_Activar_Desactivar.setText("Activar");        
            }
        }       
        
    }//GEN-LAST:event_Tbl_ClientesMouseClicked

    private void Btn_Activar_DesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Activar_DesactivarActionPerformed
 
        try{
            int fila = Tbl_Clientes.getSelectedRow();

            if(fila != -1 && fila != 0)
            {
                Activar_Desactivar();
            }else if(fila == -1){            
                JOptionPane.showMessageDialog(null, "No puede desactivar el elemento Consumidor Final.","!Error¡", JOptionPane.ERROR_MESSAGE);                    
                LimpiarCliente();
                Btn_Añadir.setEnabled(true);
            }
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+"-"+aux2+"-"+aux3+" "+fecha.get(Calendar.HOUR_OF_DAY)+" "+fecha.get(Calendar.MINUTE)+" "+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrClientes.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Clientes-BtnActivar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_Btn_Activar_DesactivarActionPerformed

    private void Btn_EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EditarActionPerformed
         
        try{
            int fila = Tbl_Clientes.getSelectedRow();        
            if(fila == 0)
            {
                JOptionPane.showMessageDialog(null, "No puede editar el elemento Consumidor Final.","!Error¡", JOptionPane.ERROR_MESSAGE);
                LimpiarCliente();
                Btn_Añadir.setEnabled(true);
            }else {                     
                EditarCliente();
                LimpiarCliente();              
            }        
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+"-"+aux2+"-"+aux3+" "+fecha.get(Calendar.HOUR_OF_DAY)+" "+fecha.get(Calendar.MINUTE)+" "+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrClientes.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Clientes-BtnEditar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_Btn_EditarActionPerformed

    private void Btn_AñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_AñadirActionPerformed
         
        try{
            LlenarCliente();        
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+"-"+aux2+"-"+aux3+" "+fecha.get(Calendar.HOUR_OF_DAY)+" "+fecha.get(Calendar.MINUTE)+" "+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrClientes.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Clientes-BtnAñadir-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_Btn_AñadirActionPerformed

    private void Txt_ApellidoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_ApellidoClienteKeyTyped
         
                char c = evt.getKeyChar();
        String Texto = Txt_ApellidoCliente.getText();

        if((c < 'A' || c > 'Z') && (c < 'a' || c > 'z')){

            evt.consume();

        }
              
        if (Txt_ApellidoCliente.getText().length() >= 20){
        
        evt.consume();
        
        }
    
         if((evt.getKeyChar() == 22)){
        
            Txt_ApellidoCliente.setText(Texto.substring(0, 20));
                    
        }
          
        if (Txt_ApellidoCliente.getText().length() == 1){

            char mayuscula = Texto.charAt(0);
            Texto = Character.toUpperCase(mayuscula)+ Texto.substring(1,Texto.length());
            Txt_ApellidoCliente.setText(Texto);

        }
        
    }//GEN-LAST:event_Txt_ApellidoClienteKeyTyped

    private void Txt_TelefonoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_TelefonoClienteKeyTyped
          
                
        char c = evt.getKeyChar();
        String Texto = Txt_TelefonoCliente.getText();
       
        if(c < '0' || c > '9') {
        
            //consume no valida los datos
            evt.consume();
             
        
        }
        
        if (Txt_TelefonoCliente.getText().length() == 0 && (c == '0' || c == '4' || c == '5' || c == '6' || c == '1') ){
       
        evt.consume();
        JOptionPane.showMessageDialog(this, "El número de teléfono debe de comenzar con 2, 3, 7, 8 ó 9");
        
        }
        
        
        if (Txt_TelefonoCliente.getText().length() >= 8){
        
        evt.consume();
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_TelefonoCliente.setText(Texto.substring(0, 8));
                    
        }
        
    }//GEN-LAST:event_Txt_TelefonoClienteKeyTyped

    private void Txt_DireccionClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_DireccionClienteKeyTyped
         
        char c = evt.getKeyChar();
        String Texto = Txt_DireccionCliente.getText();
        
          if (Txt_DireccionCliente.getText().length() >= 125){
        
        evt.consume();        
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_DireccionCliente.setText(Texto.substring(0, 125));
                    
        }
        
    }//GEN-LAST:event_Txt_DireccionClienteKeyTyped

    private void Txt_CorreoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_CorreoClienteKeyTyped
        
        char c = evt.getKeyChar();
        String Texto = Txt_CorreoCliente.getText();
        
          if (Txt_CorreoCliente.getText().length() >= 45){
        
        evt.consume();
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_CorreoCliente.setText(Texto.substring(0, 45));
                    
        }        
        
    }//GEN-LAST:event_Txt_CorreoClienteKeyTyped

    private void Txt_DocumentoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_DocumentoClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_DocumentoClienteActionPerformed

    private void Txt_DocumentoClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_DocumentoClienteKeyTyped
            
        char c = evt.getKeyChar();
        String Texto = Txt_DocumentoCliente.getText();
        
         if((c < '0' || c > '9')){
        
            evt.consume();
        
        }
        
          if (Txt_DocumentoCliente.getText().length() >= 20){
        
            evt.consume();
        
        }
        
        if((evt.getKeyChar() == 22)){
        
            Txt_DocumentoCliente.setText(Texto.substring(0, 20));
                    
        }
    }//GEN-LAST:event_Txt_DocumentoClienteKeyTyped

    private void Btn_ImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ImprimirActionPerformed

        try{
            imprimir();
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+"-"+aux2+"-"+aux3+" "+fecha.get(Calendar.HOUR_OF_DAY)+" "+fecha.get(Calendar.MINUTE)+" "+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrClientes.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Clientes-BtnLimpiar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_Btn_ImprimirActionPerformed
    
    
    //METODOS
    private void inicializarPermisos()
    {                        
        if(verificarPermisosAñadir(idUsuario, 2).equals("true"))
        {
            Btn_Añadir.setEnabled(true);
        }else if(verificarPermisosAñadir(idUsuario, 2).equals("false")){
            Btn_Añadir.setEnabled(false);
        }
        
        if(verificarPermisosEditar(idUsuario, 2).equals("true"))
        {
            Btn_Editar.setEnabled(true);
        }else if(verificarPermisosEditar(idUsuario, 2).equals("false")){
            Btn_Editar.setEnabled(false);
        }
        
        if(verificarPermisosActivar(idUsuario, 2).equals("true"))
        {
            Btn_Activar_Desactivar.setEnabled(true);
        }else if(verificarPermisosActivar(idUsuario, 2).equals("false")){
            Btn_Activar_Desactivar.setEnabled(false);
        }
        
        if(verificarPermisosImprimir(idUsuario, 2).equals("true"))
        {
            Btn_Imprimir.setEnabled(true);
        }else if(verificarPermisosImprimir(idUsuario, 2).equals("false")){
            Btn_Imprimir.setEnabled(false);
        }                        
    }

    private void LimpiarCliente()
    {
        Txt_IdCliente.setText("");
        Txt_NombreCliente.setText("");
        Txt_ApellidoCliente.setText("");
        Txt_TelefonoCliente.setText("");
        jComboBox2.setSelectedIndex(0);
        Txt_DireccionCliente.setText("");
        Txt_CorreoCliente.setText("");
        jComboBox1.setSelectedIndex(0);
        Txt_DocumentoCliente.setText("");        
        
        if(idUsuario == 1)
        {            
            Btn_Editar.setEnabled(false);
            Btn_Añadir.setEnabled(true);
            Btn_Activar_Desactivar.setEnabled(false);                        
        }        
    }
        
    public void listaTipoDocumento()
    {
  
      jComboBox1.removeAllItems();
  
      List<TipoDocumento> tipoDocumento = this.daoTipoDocumento.findTipoDocumentoEntities();
  
             jComboBox1.addItem("Seleccione");
      
         for(TipoDocumento TipoDocumento : tipoDocumento){
             
             String lista = TipoDocumento.getNombreTipoDocumento();
             if(TipoDocumento.isActivoTipoDocumento() == true)
             {
                 jComboBox1.addItem(lista);
             }
                                
                    };
    }  
    
    public void listaSexo()
    {
  
         jComboBox2.removeAllItems();
  
         List<Sexo> sexo = this.daoSexo.findSexoEntities();
  
         jComboBox2.addItem("Seleccione");
      
         for(Sexo Sexo : sexo){
             
             String lista = Sexo.getNombreSexo();
             jComboBox2.addItem(lista);
                                
                    };
  }  
                
    private void ActualizarCliente()
    {
        
        DefaultTableModel t = (DefaultTableModel)Tbl_Clientes.getModel();
        t.setRowCount(0);
        Tbl_Clientes.setModel(t);            
        
        List<Clientes> clientes = this.daoClientes.findClientesEntities();
        
        String s;
        for(Clientes Clientes : clientes){
                
            if(Clientes.isActivoCliente() == true){
                s = "Activado";
                }else{
                s = "Desactivado";
                }
                t.addRow(
                    new Object[]{
                        Clientes.getIdCliente(),
                        Clientes.getNombreCliente(),
                        Clientes.getApellidoCliente(),
                        Clientes.getTelefonoCliente(),
                        Clientes.getDireccionCliente(),
                        Clientes.getCorreoCliente(),
                        GetNombreTipoDocumento(Clientes.getIdTipoDocumento()),
                        Clientes.getDocumento(),
                        GetNombreSexo(Clientes.getIdSexo()),
                        s
                    });
        }            
    }
                              
    private void LlenarCliente()
    {
        
        if(Txt_NombreCliente.getText().length() < 3){        
        
            JOptionPane.showMessageDialog(null, "El nombre tiene que contener al menos 3 letras","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(ValidacionTresLetras(Txt_NombreCliente.getText()) == true){
                        
            JOptionPane.showMessageDialog(null, "El nombre no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);        
            
        }else if(Txt_ApellidoCliente.getText().length() < 2){
                
            JOptionPane.showMessageDialog(null, "El apellido tiene que contener al menos 2 letras","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(ValidacionTresLetras(Txt_ApellidoCliente.getText()) == true){
                        
            JOptionPane.showMessageDialog(null, "El apellido no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);        
            
        }else if(Txt_TelefonoCliente.getText().length() < 8){
                
            JOptionPane.showMessageDialog(null, "El teléfono debe contener 8 números.\nEl formato de teléfono es: xxxxxxxx","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(String.valueOf(jComboBox2.getSelectedItem()) == "Seleccione"){
                
            JOptionPane.showMessageDialog(null, "Debe seleccionar un género.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(Txt_DireccionCliente.getText().length() < 8){
                
            JOptionPane.showMessageDialog(null, "La dirección debe contener mínimo 8 letras.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(ValidacionTresLetras(Txt_DireccionCliente.getText()) == true){
                        
            JOptionPane.showMessageDialog(null, "La dirección no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);        
            
        }else if(ValidacionMail(Txt_CorreoCliente.getText())== false){
                
            JOptionPane.showMessageDialog(null, "Formato de E-mail inválido.\nEl formato de E-mail es: user@example.com","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(String.valueOf(jComboBox1.getSelectedItem()) == "Seleccione"){
                
            JOptionPane.showMessageDialog(null, "Debe seleccionar un tipo de documento.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if( (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("dni") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false ) || (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("identidad") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false ) || (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("rtn") && ValidacionRTN(Txt_DocumentoCliente.getText())== false)|| String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("visa")&& Validacionvisa(Txt_DocumentoCliente.getText())){
                
            JOptionPane.showMessageDialog(null, "El formato del documento es inválido.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(ValidacionDeRepetidos(Txt_DocumentoCliente.getText()) == true){
            
            JOptionPane.showMessageDialog(null, "Este cliente ya existe.","!Error¡", JOptionPane.ERROR_MESSAGE);                         
            
        }else{
            
            
            objCliente.setNombreCliente(Txt_NombreCliente.getText());
            objCliente.setApellidoCliente(Txt_ApellidoCliente.getText());
            objCliente.setTelefonoCliente(Integer.parseInt(Txt_TelefonoCliente.getText()));
            objCliente.setDireccionCliente(Txt_DireccionCliente.getText());
            objCliente.setCorreoCliente(Txt_CorreoCliente.getText());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(String.valueOf(jComboBox1.getSelectedItem())));
            objCliente.setDocumento(Txt_DocumentoCliente.getText());
            objCliente.setIdSexo(GetIdSexo(String.valueOf(jComboBox2.getSelectedItem())));
            objCliente.setActivoCliente(true);
            
            
        try {
            daoClientes.create(objCliente);
            ActualizarCliente();
            LimpiarCliente();
            JOptionPane.showMessageDialog(null, "Datos guardados correctamente.", "Clientes", 0, icono);                
        } catch (Exception ex) {
            Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
       }   
    } 
            
    private void EditarCliente()
    {
        
        boolean estado = true;           
            
        if(Txt_NombreCliente.getText().length() < 3){            
            
            JOptionPane.showMessageDialog(null, "El nombre tiene que contener al menos 3 letras.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(ValidacionTresLetras(Txt_NombreCliente.getText()) == true){
                        
            JOptionPane.showMessageDialog(null, "El nombre no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);        
            
        }else if(Txt_ApellidoCliente.getText().length() < 3){        
            
            JOptionPane.showMessageDialog(null, "El apellido tiene que contener al menos 2 letras","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(ValidacionTresLetras(Txt_ApellidoCliente.getText()) == true){
                        
            JOptionPane.showMessageDialog(null, "El apellido no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);        
            
        }else if(Txt_TelefonoCliente.getText().length() < 8){
                    
            JOptionPane.showMessageDialog(null, "El Teléfono debe de contener 8 números.\nEl formato de teléfono es: xxxxxxxx","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(String.valueOf(jComboBox2.getSelectedItem()) == "Seleccione"){
                    
            JOptionPane.showMessageDialog(null, "Debe de seleccionar un género.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(Txt_DireccionCliente.getText().length() < 8){
                    
            JOptionPane.showMessageDialog(null, "La Dirección debe de contener mínimo 8 letras.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(ValidacionTresLetras(Txt_DireccionCliente.getText()) == true){
                        
            JOptionPane.showMessageDialog(null, "La dirección no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);        
            
        }else if(ValidacionMail(Txt_CorreoCliente.getText())== false){
                    
            JOptionPane.showMessageDialog(null, "Formato de E-mail inválido.\nEl formato de E-mail es: user@example.com","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if(String.valueOf(jComboBox1.getSelectedItem()) == "Seleccione"){
                    
            JOptionPane.showMessageDialog(null, "Debe de seleccionar un Tipo de documento.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else if( (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("dni") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false ) || (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("identidad") && ValidacionDNI(Txt_DocumentoCliente.getText()) == false ) || (String.valueOf(jComboBox1.getSelectedItem()).equalsIgnoreCase("rtn") && ValidacionRTN(Txt_DocumentoCliente.getText())== false)){
                   
            JOptionPane.showMessageDialog(null, "El formato del documento es inválido.","!Error¡", JOptionPane.ERROR_MESSAGE);        
        
        }else{
            
            if(Txt_Activo.getText().equals("Activado"))
            {
                estado = true;                
            }else if(Txt_Activo.getText().equals("Activado")){
                estado = false;                
            }
            
            objCliente.setIdCliente(Integer.parseInt(Txt_IdCliente.getText()));
            objCliente.setNombreCliente(Txt_NombreCliente.getText());
            objCliente.setApellidoCliente(Txt_ApellidoCliente.getText());
            objCliente.setTelefonoCliente(Integer.parseInt(Txt_TelefonoCliente.getText()));
            objCliente.setDireccionCliente(Txt_DireccionCliente.getText());
            objCliente.setCorreoCliente(Txt_CorreoCliente.getText());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(String.valueOf(jComboBox1.getSelectedItem())));
            objCliente.setDocumento(Txt_DocumentoCliente.getText());
            objCliente.setIdSexo(GetIdSexo(String.valueOf(jComboBox2.getSelectedItem())));                                    
            objCliente.setActivoCliente(estado);                 
            
        try {
            daoClientes.edit(objCliente);
            ActualizarCliente();
            JOptionPane.showMessageDialog(null, "Se actualizó correctamente.", "Clientes", 0, icono);                             
        } catch (Exception ex) {
             Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
       }  
            
            }            
            
    private void Activar_Desactivar()
    {
        
        int fila = Tbl_Clientes.getSelectedRow();
        
        String a = Txt_Activo.getText().toString();
       
        if(a.equals("Activado")){
        
            objCliente.setIdCliente(Integer.parseInt(Txt_IdCliente.getText()));
            objCliente.setNombreCliente(Tbl_Clientes.getValueAt(fila, 1).toString());
            objCliente.setApellidoCliente(Tbl_Clientes.getValueAt(fila, 2).toString());
            objCliente.setTelefonoCliente(Integer.parseInt(Tbl_Clientes.getValueAt(fila, 3).toString()));
            objCliente.setDireccionCliente(Tbl_Clientes.getValueAt(fila, 4).toString());
            objCliente.setCorreoCliente(Tbl_Clientes.getValueAt(fila, 5).toString());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(Tbl_Clientes.getValueAt(fila, 6).toString()));
            objCliente.setDocumento(Tbl_Clientes.getValueAt(fila, 7).toString());
            objCliente.setIdSexo(GetIdSexo(Tbl_Clientes.getValueAt(fila, 8).toString()));
            objCliente.setActivoCliente(false);
        
        
        try {
            daoClientes.edit(objCliente);
            ActualizarCliente();
            Btn_Activar_Desactivar.setText("Activar");
            JOptionPane.showMessageDialog(this, "Se desactivó correctamente.");
        } catch (Exception ex) {
            Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        LimpiarCliente();
        Btn_Limpiar.setEnabled(false);
        Btn_Añadir.setEnabled(true);
        
        }else{
        
            objCliente.setIdCliente(Integer.parseInt(Txt_IdCliente.getText()));
            objCliente.setNombreCliente(Tbl_Clientes.getValueAt(fila, 1).toString());
            objCliente.setApellidoCliente(Tbl_Clientes.getValueAt(fila, 2).toString());
            objCliente.setTelefonoCliente(Integer.parseInt(Tbl_Clientes.getValueAt(fila, 3).toString()));
            objCliente.setDireccionCliente(Tbl_Clientes.getValueAt(fila, 4).toString());
            objCliente.setCorreoCliente(Tbl_Clientes.getValueAt(fila, 5).toString());
            objCliente.setIdTipoDocumento(GetIdTipoDocumento(Tbl_Clientes.getValueAt(fila, 6).toString()));
            objCliente.setDocumento(Tbl_Clientes.getValueAt(fila, 7).toString());
            objCliente.setIdSexo(GetIdSexo(Tbl_Clientes.getValueAt(fila, 8).toString()));
            objCliente.setActivoCliente(true);
        
        try {
            daoClientes.edit(objCliente);
            ActualizarCliente();
            Btn_Activar_Desactivar.setText("Desactivar");
            JOptionPane.showMessageDialog(this, "Se activó correctamente.");
        } catch (Exception ex) {
            Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        LimpiarCliente();
        Btn_Limpiar.setEnabled(false);
        Btn_Añadir.setEnabled(true);
        
        }
        
        }                       
    
    private static String GetNombreTipoDocumento(int id)
    {
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT nombreTipoDocumento FROM TipoDocumento WHERE idTipoDocumento = '"+ id+ "'";
              Query query = em.createQuery(select);
    
              return query.getSingleResult().toString() ;
            
          }         
   
    private static int GetIdTipoDocumento(String Nombre)
    {
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT idTipoDocumento FROM TipoDocumento WHERE nombreTipoDocumento = '"+ Nombre+ "'";
              Query query = em.createQuery(select);
    
              return Integer.parseInt(query.getSingleResult().toString());
            
          }             
          
    private static String GetNombreSexo(int id)
    {
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT nombreSexo FROM Sexo WHERE idSexo = '"+ id+ "'";
              Query query = em.createQuery(select);
    
              return query.getSingleResult().toString() ;
            
          }   
          
    private static int GetIdSexo(String Nombre)
    {
        
              EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
              EntityManager em = emf.createEntityManager();
              String select = "SELECT idSexo FROM Sexo WHERE nombreSexo  = '"+ Nombre + "'";
              Query query = em.createQuery(select);
    
              return Integer.parseInt(query.getSingleResult().toString());
            
          }   
                                     
    public static boolean ValidacionMail(String Nombre)
    {
        
        return Nombre.matches("[^@]+@[^@]+\\.[a-zA-Z]{2,}");
        
        
        }
      
    public static boolean Validacionvisa(String Visa)
    {  
        
        return Visa.matches("[a-zA-Z]{2,}");               
    }
          
    public static boolean ValidacionDNI(String DNI)
    {
        
        return DNI.matches("^[0-1]{1}[0-9]{12}$");
                
        }
       
    public static boolean ValidacionRTN(String RTN)
    {
        
        return RTN.matches("^[0-1]{1}[0-9]{13}$");
                
        }
       
    public static boolean ValidacionDeRepetidos(String Documento)
    {
       
         EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
         EntityManager em = emf.createEntityManager();
      
             String select = "SELECT idCliente FROM Clientes WHERE documento  = '"+Documento+ "'";
   
             Query query = em.createQuery(select);
       
             if(query.getResultList().size() == 0){
             
             return false;
             
             }else{
             
             return true;
                
             }
             
        }
     
    public boolean ValidacionTresLetras(String Nombre)
    {
        String patron = "^(\\d|(([A-Za-zñÑ\\s])\\3?(?!\\3)))+$";
        Pattern patt = Pattern.compile(patron);
        Matcher comparador = patt.matcher(Nombre);
        if(comparador.matches())
        {
            return false;
        }else{
            return true;
        }
    }
     
    public void imprimir()
    {         
        java.util.Date fecha = new Date();        
        
        List<Clientes> listaClientesBD = daoClientes.findClientesEntities();
        java.text.SimpleDateFormat formatoFecha = new java.text.SimpleDateFormat("dd/MM/yyyy");        

        
        EntityManager em = daoClientes.getEntityManager();                                        
        
        Object[][] arrayClientes;
        arrayClientes = new Object[listaClientesBD.size()][9];      
    
        for(int i = 0; i < listaClientesBD.size(); i++)
        {        
            for(int j = 0; j < 9 ; j++)
            {            
                switch(j)
                {                
                    case 0: //ID                        
                        arrayClientes[i][0] = listaClientesBD.get(i).getIdCliente();
                    break;
                    
                    case 1: //Nombre                        
                        arrayClientes[i][1] = daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getNombreCliente();
                    break;
                    
                    case 2: //apellido                        
                       arrayClientes[i][2] = daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getApellidoCliente();
                    break; 
                    case 3: //telefono                        
                       arrayClientes[i][3] = daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getTelefonoCliente();
                    break; 
                    case 4: //Direccion                      
                       arrayClientes[i][4] = daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getDireccionCliente();
                    break; 
                    case 5: //correo                       
                       arrayClientes[i][5] = daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getCorreoCliente();
                    case 6: //TipoDocumento                       
                       arrayClientes[i][6] = daoTipoDocumento.findTipoDocumento(daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getIdTipoDocumento()).getNombreTipoDocumento();
                    break;  
                    case 7: //Documento                       
                       arrayClientes[i][7] = daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getDocumento();
                       
                    break; 
                    case 8: //Genero                        
                       arrayClientes[i][8] = daoSexo.findSexo(daoClientes.findClientes(listaClientesBD.get(i).getIdCliente()).getIdSexo()).getNombreSexo();
                    break; 
                   
                }            
            }
        }
        
        HashMap param = new HashMap();                      
        param.put("Fecha", formatoFecha.format(fecha));       
        param.put("Empleado",Empleado);
        param.put("Hora", horaImpresion);
        
        try{
            JasperReport reporteClientes = JasperCompileManager.compileReport("src/main/resources/Reports/ReporteClientes.jrxml");
            JasperPrint print = JasperFillManager.fillReport(reporteClientes,
                    param, 
                    dataSource.getDataSource(arrayClientes));
            JasperV view = new JasperV(print,false);            
            view.setVisible(true);            
        } catch (JRException ex) {
            Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private String verificarPermisosAñadir(int idUsuario, int Modulo)
    {        
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT añadir FROM Permisos WHERE IdUsuario = '"+ idUsuario+ "' AND IdModulo = '"+ Modulo+ "'";
        Query query = em.createQuery(select);                        
                
        return query.getSingleResult().toString();        
    }
    
    private String verificarPermisosEditar(int idUsuario, int Modulo)
    {        
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT actualizar FROM Permisos WHERE IdUsuario = '"+ idUsuario+ "' AND IdModulo = '"+ Modulo+ "'";
        Query query = em.createQuery(select);                        
                
        return query.getSingleResult().toString();        
    }
    
    private String verificarPermisosActivar(int idUsuario, int Modulo)
    {        
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT activar FROM Permisos WHERE IdUsuario = '"+ idUsuario+ "' AND IdModulo = '"+ Modulo+ "'";
        Query query = em.createQuery(select);                        
                
        return query.getSingleResult().toString();        
    }
    
    private String verificarPermisosImprimir(int idUsuario, int Modulo)
    {        
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT imprimir FROM Permisos WHERE IdUsuario = '"+ idUsuario+ "' AND IdModulo = '"+ Modulo+ "'";
        Query query = em.createQuery(select);                        
                
        return query.getSingleResult().toString();        
    }
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FmrClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FmrClientes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Activar_Desactivar;
    private javax.swing.JButton Btn_Añadir;
    private javax.swing.JButton Btn_Editar;
    private javax.swing.JButton Btn_Imprimir;
    private javax.swing.JButton Btn_Limpiar;
    private javax.swing.JButton Btn_Regresar;
    private javax.swing.JTable Tbl_Clientes;
    private javax.swing.JTextField Txt_Activo;
    private javax.swing.JTextField Txt_ApellidoCliente;
    private javax.swing.JTextField Txt_CorreoCliente;
    private javax.swing.JTextField Txt_DireccionCliente;
    private javax.swing.JTextField Txt_DocumentoCliente;
    private javax.swing.JTextField Txt_IdCliente;
    private javax.swing.JTextField Txt_NombreCliente;
    private javax.swing.JTextField Txt_TelefonoCliente;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}