/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.screens;

import com.clases.Articulo;
import com.clases.Clientes;
import com.clases.DetalleVenta;
import com.clases.Empleados;
import com.clases.FacturaDataSource;
import com.clases.Parametros;
import com.clases.SingletonUser;
import com.clases.TipoDePago;
import com.clases.Usuarios;
import com.clases.Venta;
import com.dao.ArticuloJpaController;
import com.dao.ClientesJpaController;
import com.dao.DetalleVentaJpaController;
import com.dao.EmpleadosJpaController;
import com.dao.ParametrosJpaController;
import com.dao.TipoDePagoJpaController;
import com.dao.UsuariosJpaController;
import com.dao.VentaJpaController;
import java.awt.Image;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Ariel
 */
public class FmrVentas extends javax.swing.JFrame {
    
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");    
        
    VentaJpaController daoVenta = new VentaJpaController();            
    ClientesJpaController daoClientes = new ClientesJpaController();        
    ArticuloJpaController daoArticulo = new ArticuloJpaController();
    UsuariosJpaController daoUsuarios = new UsuariosJpaController();
    EmpleadosJpaController daoEmpleados = new EmpleadosJpaController();
    TipoDePagoJpaController daoTipoPago = new TipoDePagoJpaController();      
    ParametrosJpaController daoParametros = new ParametrosJpaController();    
    DetalleVentaJpaController daoDetalleVenta = new DetalleVentaJpaController();
           
    Venta objVenta = new Venta();
    Clientes objClientes = new Clientes(); 
    Articulo objArticulo = new Articulo();
    Empleados objEmpleados = new Empleados();    
    TipoDePago objTipoPago = new TipoDePago();        
    Parametros objParametros = new Parametros();  
    DetalleVenta objDetalleVenta = new DetalleVenta();
    FacturaDataSource dataSource;
    
    private Usuarios usuarios = new Usuarios(); 
    private SingletonUser singleton = SingletonUser.getUsuario(usuarios);
    
    static DefaultTableModel t2;    
    int factura = 0;
    int idDetalle = 0;
    String tarj = FmrPagoMixto.numTarjeta;
    double montoT = FmrPagoMixto.canTarjeta;
    double montoE = FmrPagoMixto.canEfectivo;        
    public static double totalV;
    String Tarjeta = FmrTarjeta.nTarjeta;
    
    
    Date fecha = new Date(Calendar.getInstance().getTimeInMillis());        
    SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
    
    Date fechaBD = new Date(Calendar.getInstance().getTimeInMillis());        
    SimpleDateFormat formatterBD = new SimpleDateFormat("yyyy-MM-dd");
    
    Icon icono = new ImageIcon(getClass().getResource("/imagenes/guardar.png"));
    
    //Obtener ID de Usuario para verificar permisos
    int idUsuario = daoUsuarios.findUsuarios(singleton.getCuenta().getIdUsuario()).getIdUsuario();

    /**
     * Creates new form Ventas
     */
    public FmrVentas() {        
        initComponents();
        this.setLocationRelativeTo(null);        
        
        //ÍCONO
        Image icon = new ImageIcon(getClass().getResource("/imagenes/IconoMicrocosmos.png")).getImage();
        setIconImage(icon);
        
        //INICIALIZAR PANTALLA
        Inicializar();            
        facturaID();
    }        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Btn_Buscar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Txt_FechaFact = new javax.swing.JTextField();
        CBox_TipoPago = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        Txt_SubTotal = new javax.swing.JTextField();
        Txt_Impuesto = new javax.swing.JTextField();
        Txt_TotalVenta = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        Btn_Retirar = new javax.swing.JButton();
        CBox_IdCliente = new javax.swing.JComboBox<>();
        Txt_Cai = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        Txt_Cantidad = new javax.swing.JTextField();
        Btn_Cantidad = new javax.swing.JButton();
        Txt_IdCai = new javax.swing.JTextField();
        Txt_Fact = new javax.swing.JTextField();
        Txt_IdEmpleado = new javax.swing.JTextField();
        Txt_FechaBD = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Venta = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        Btn_Regresar = new javax.swing.JButton();
        Btn_Cancelar = new javax.swing.JButton();
        Btn_Venta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ventas - Microcosmos");
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        jPanel1.setBackground(new java.awt.Color(49, 49, 49));
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 100));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/LogoMicrocosmos.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(60, 63, 65));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setMaximumSize(new java.awt.Dimension(800, 160));
        jPanel2.setMinimumSize(new java.awt.Dimension(800, 160));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 160));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("ID Empleado");
        jLabel8.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel8.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel8.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Fecha");
        jLabel9.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel9.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel9.setPreferredSize(new java.awt.Dimension(120, 20));

        Btn_Buscar.setText("Buscar Artículos");
        Btn_Buscar.setToolTipText("Abre una nueva ventana y agrega los artículos seleccionados a la venta actual.");
        Btn_Buscar.setFocusPainted(false);
        Btn_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_BuscarActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Cliente");
        jLabel10.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel10.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel10.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Tipo Pago");
        jLabel11.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel11.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel11.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_FechaFact.setEditable(false);

        CBox_TipoPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        CBox_TipoPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBox_TipoPagoActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Subtotal:");
        jLabel15.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel15.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel15.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel16.setText("Total Venta:");
        jLabel16.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel16.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel16.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Impuesto:");
        jLabel18.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel18.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel18.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_SubTotal.setEditable(false);

        Txt_Impuesto.setEditable(false);

        Txt_TotalVenta.setEditable(false);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("CAI");
        jLabel17.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel17.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel17.setPreferredSize(new java.awt.Dimension(120, 20));

        Btn_Retirar.setText("Retirar Artículo");
        Btn_Retirar.setToolTipText("Retira el artículo seleccionado de la venta actual.");
        Btn_Retirar.setFocusPainted(false);
        Btn_Retirar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RetirarActionPerformed(evt);
            }
        });

        CBox_IdCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        CBox_IdCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBox_IdClienteActionPerformed(evt);
            }
        });

        Txt_Cai.setEditable(false);
        Txt_Cai.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Cantidad:");
        jLabel20.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel20.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel20.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_Cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_CantidadKeyTyped(evt);
            }
        });

        Btn_Cantidad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/sumar.png"))); // NOI18N
        Btn_Cantidad.setToolTipText("Añade la cantidad digitada al artículo seleccionado.");
        Btn_Cantidad.setFocusPainted(false);
        Btn_Cantidad.setMaximumSize(new java.awt.Dimension(73, 22));
        Btn_Cantidad.setMinimumSize(new java.awt.Dimension(73, 22));
        Btn_Cantidad.setPreferredSize(new java.awt.Dimension(73, 22));
        Btn_Cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_CantidadActionPerformed(evt);
            }
        });

        Txt_IdEmpleado.setEditable(false);
        Txt_IdEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_IdEmpleadoKeyTyped(evt);
            }
        });

        Txt_FechaBD.setEditable(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Txt_FechaFact)
                    .addComponent(CBox_IdCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CBox_TipoPago, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Txt_IdEmpleado))
                .addGap(90, 90, 90)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Btn_Retirar, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Buscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Txt_Cai, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Txt_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Btn_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)))
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Txt_TotalVenta, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(Txt_Impuesto, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                            .addComponent(Txt_SubTotal)))
                    .addComponent(Txt_FechaBD, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Txt_Fact, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(Txt_IdCai))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_SubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_Fact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_Impuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_IdCai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Txt_Cai, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Txt_FechaBD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(Btn_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(Btn_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Txt_IdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Txt_FechaFact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(CBox_IdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Txt_Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Retirar)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_TotalVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CBox_TipoPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Btn_Buscar.getAccessibleContext().setAccessibleDescription("Abre una pantalla nueva y busca los artículos por nombre o ID.");
        Btn_Retirar.getAccessibleContext().setAccessibleDescription("Elimina el artículo seleccionado de la tabla.");
        Btn_Cantidad.getAccessibleContext().setAccessibleName("Agregar");
        Btn_Cantidad.getAccessibleContext().setAccessibleDescription("Añade la cantidad de artículos proporcionada.");

        jTable_Venta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id Artículo", "Artículo", "Precio", "Talla", "Cantidad", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Venta.setMaximumSize(new java.awt.Dimension(800, 230));
        jTable_Venta.setMinimumSize(new java.awt.Dimension(800, 230));
        jTable_Venta.setPreferredSize(new java.awt.Dimension(800, 230));
        jTable_Venta.getTableHeader().setReorderingAllowed(false);
        jTable_Venta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_VentaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable_VentaMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Venta);
        if (jTable_Venta.getColumnModel().getColumnCount() > 0) {
            jTable_Venta.getColumnModel().getColumn(0).setResizable(false);
            jTable_Venta.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTable_Venta.getColumnModel().getColumn(1).setResizable(false);
            jTable_Venta.getColumnModel().getColumn(1).setPreferredWidth(310);
            jTable_Venta.getColumnModel().getColumn(2).setResizable(false);
            jTable_Venta.getColumnModel().getColumn(2).setPreferredWidth(40);
            jTable_Venta.getColumnModel().getColumn(3).setResizable(false);
            jTable_Venta.getColumnModel().getColumn(3).setPreferredWidth(40);
            jTable_Venta.getColumnModel().getColumn(4).setResizable(false);
            jTable_Venta.getColumnModel().getColumn(4).setPreferredWidth(40);
            jTable_Venta.getColumnModel().getColumn(5).setResizable(false);
            jTable_Venta.getColumnModel().getColumn(5).setPreferredWidth(40);
        }

        jPanel3.setBackground(new java.awt.Color(60, 63, 65));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setMaximumSize(new java.awt.Dimension(800, 90));
        jPanel3.setMinimumSize(new java.awt.Dimension(800, 90));
        jPanel3.setPreferredSize(new java.awt.Dimension(800, 90));

        Btn_Regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/regresar.png"))); // NOI18N
        Btn_Regresar.setText(" Regresar");
        Btn_Regresar.setToolTipText("Regresa a la pantalla de Menú Principal.");
        Btn_Regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Regresar.setFocusPainted(false);
        Btn_Regresar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RegresarActionPerformed(evt);
            }
        });

        Btn_Cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cancelar.png"))); // NOI18N
        Btn_Cancelar.setText(" Cancelar");
        Btn_Cancelar.setToolTipText("Cancela la venta actual y limpia todos los campos.");
        Btn_Cancelar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Cancelar.setFocusPainted(false);
        Btn_Cancelar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Cancelar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Cancelar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_CancelarActionPerformed(evt);
            }
        });

        Btn_Venta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/vender.png"))); // NOI18N
        Btn_Venta.setText("Realizar Venta");
        Btn_Venta.setToolTipText("Factura la venta actual y genera un archivo pdf con los datos de la venta actual.");
        Btn_Venta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Venta.setFocusPainted(false);
        Btn_Venta.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Venta.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Venta.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_VentaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addComponent(Btn_Venta, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(Btn_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(Btn_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Venta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        Btn_Regresar.getAccessibleContext().setAccessibleDescription("Regresa a la pantalla anterior.");
        Btn_Cancelar.getAccessibleContext().setAccessibleDescription("Cancela la venta actual.");
        Btn_Venta.getAccessibleContext().setAccessibleDescription("Procede a realizar la venta y guardar los datos.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    //BOTONES
    private void Btn_RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RegresarActionPerformed

        try{            
            FmrMenú Menu = new FmrMenú();
            Menu.setVisible(true);        
            this.dispose();        
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+aux2+aux3+"-"+fecha.get(Calendar.HOUR_OF_DAY)+fecha.get(Calendar.MINUTE)+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrVentas.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Ventas-BtnRegresar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_Btn_RegresarActionPerformed
       
    private void Btn_VentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_VentaActionPerformed
                     
        try{
            hacerVenta();               
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+aux2+aux3+"-"+fecha.get(Calendar.HOUR_OF_DAY)+fecha.get(Calendar.MINUTE)+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrVentas.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Ventas-BtnVenta-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_Btn_VentaActionPerformed

    private void Btn_CancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_CancelarActionPerformed
                  
        try{
            cancelarVenta();
            Btn_Buscar.setEnabled(true);
            Btn_Retirar.setEnabled(true);
            Btn_Cantidad.setEnabled(true);
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+aux2+aux3+"-"+fecha.get(Calendar.HOUR_OF_DAY)+fecha.get(Calendar.MINUTE)+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrVentas.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Ventas-BtnCancelar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_Btn_CancelarActionPerformed
       
    private void jTable_VentaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_VentaMouseClicked
        
        int filas = jTable_Venta.getRowCount();
        
        if(filas == 0)
        {                   
            JOptionPane.showMessageDialog(null, "No hay artículos que seleccionar.","¡Aviso!", JOptionPane.WARNING_MESSAGE);        
        }else if(filas != 0){
            calcularValores();
        }
    }//GEN-LAST:event_jTable_VentaMouseClicked

    private void Btn_CantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_CantidadActionPerformed
                                        
        try{
            int filas =  jTable_Venta.getRowCount();
            int seleccion = jTable_Venta.getSelectedRow();

            if(filas == 0 || seleccion == -1)
            {
                JOptionPane.showMessageDialog(null, "No ha seleccionado un artículo.","¡Aviso!", JOptionPane.INFORMATION_MESSAGE);
            }else{                                        
                añadirCantidad();
                calcularValores();                       
            }
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+aux2+aux3+"-"+fecha.get(Calendar.HOUR_OF_DAY)+fecha.get(Calendar.MINUTE)+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrVentas.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Ventas-BtnAñadirCantidad-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_Btn_CantidadActionPerformed

    private void Txt_CantidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_CantidadKeyTyped
        
        char l = evt.getKeyChar();

        // Permitir solo números
        if (!Character.isDigit(l))
        {
            evt.consume();
        }

    }//GEN-LAST:event_Txt_CantidadKeyTyped

    private void Btn_RetirarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RetirarActionPerformed

        try{
            int fila = jTable_Venta.getSelectedRow();

            if(fila != -1)
            {
                retirarArticulo();
                CBox_TipoPago.setSelectedItem("Seleccione");            
            }else{
                JOptionPane.showMessageDialog(null, "Debe seleccionar el artículo que desea retirar.","¡Error!", JOptionPane.ERROR_MESSAGE);
            }
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+aux2+aux3+"-"+fecha.get(Calendar.HOUR_OF_DAY)+fecha.get(Calendar.MINUTE)+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrVentas.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Ventas-BtnRetirar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_Btn_RetirarActionPerformed

    private void CBox_TipoPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBox_TipoPagoActionPerformed
                        
        String mixto = String.valueOf(CBox_TipoPago.getSelectedItem());
        
        if(mixto.equals("Mixto"))
        {
            FmrPagoMixto pMixto = new FmrPagoMixto();
            pMixto.setVisible(true);                                   
        }else if(mixto.equals("Tarjeta")){
            FmrTarjeta tar = new FmrTarjeta();
            tar.setVisible(true);            
        }
                
    }//GEN-LAST:event_CBox_TipoPagoActionPerformed

    private void Btn_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_BuscarActionPerformed

        try{
            FmrBuscarArticulo buscarArt = new FmrBuscarArticulo();
            buscarArt.setVisible(true);
        }catch(Exception ex){
            try{
                Calendar fecha = new GregorianCalendar();
                String fecha1;
                String aux1,aux2,aux3;
                aux1 = Integer.toString(fecha.get(Calendar.YEAR));
                aux2 = (fecha.get(Calendar.MONTH)<10)? "0"+(Integer.toString(fecha.get(Calendar.MONTH)+1)) : Integer.toString(fecha.get(Calendar.MONTH));
                switch(aux2){
                    case "01":
                        aux2= "01";
                        break;
                    case "02":
                        aux2= "02";
                        break;case "03":
                            aux2= "03";
                            break;case "04":
                                aux2= "04";
                                break;case "05":
                                    aux2= "05";
                                    break;case "06":
                                        aux2= "06";
                                        break;case "07":
                                            aux2= "07";
                                            break;case "08":
                                                aux2= "08";
                                                break;case "09":
                                                    aux2= "09";
                                                    break;
                                                case "010":
                                                    aux2= "10";
                                                    break;
                                                case "011":
                                                    aux2= "11";
                                                    break;
                                                case "012":
                                                    aux2= "12";
                                                    break;
                                                default:
                                                    break;
                }
                aux3 = (fecha.get(Calendar.DAY_OF_MONTH)<10)? "0"+Integer.toString(fecha.get(Calendar.DAY_OF_MONTH)) : Integer.toString(fecha.get(Calendar.DAY_OF_MONTH));
                fecha1 = aux1+aux2+aux3+"-"+fecha.get(Calendar.HOUR_OF_DAY)+fecha.get(Calendar.MINUTE)+fecha.get(Calendar.SECOND);
                Logger logger = Logger.getLogger(FmrVentas.class.getName());
                FileHandler fh = null;
                fh = new FileHandler("./Logs/"+"Ventas-BtnBuscar-"+fecha1+".log");
                logger.addHandler(fh);
                fh.setFormatter(new SimpleFormatter());
                logger.setLevel(Level.WARNING);
                logger.log(Level.SEVERE,ex.getMessage());
                fh.close();
            } catch (IOException | SecurityException e) {
                Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_Btn_BuscarActionPerformed

    private void Txt_IdEmpleadoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_IdEmpleadoKeyTyped

        // TODO add your handling code here:
    }//GEN-LAST:event_Txt_IdEmpleadoKeyTyped

    private void CBox_IdClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBox_IdClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBox_IdClienteActionPerformed

    private void jTable_VentaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_VentaMouseEntered
        
        int filas = jTable_Venta.getRowCount();
        
        if(filas != 0)
        {
            calcularValores();
        }    
        
        if(FmrPagoMixto.cancel == 2)
        {
            CBox_TipoPago.setSelectedIndex(0);            
        }
        
        FmrPagoMixto.cancel = 0;
        
    }//GEN-LAST:event_jTable_VentaMouseEntered
                
    
    //METODOS
    private void Inicializar()
    {   
        factura = 0;
        idDetalle = 0;
        
        Btn_Venta.setEnabled(false);                
        Txt_Cai.setEditable(false);
        Txt_IdCai.setVisible(false);
        Txt_Cantidad.setText("1");
        Txt_Fact.setVisible(false);    
        Txt_SubTotal.setText("0.00");
        Txt_Impuesto.setText("0.00");                
        Txt_TotalVenta.setText("0.00");
        CBox_TipoPago.setEnabled(false);  
        Txt_FechaBD.setVisible(false);    
                       
        if(idUsuario != 1)
        {
            if(verificarPermisos(idUsuario, 13).equals("true"))
            {
                Btn_Buscar.setEnabled(true);
            }else{
                Btn_Buscar.setEnabled(false);
            }                
        }

        listaClientes();
        listaTipoPago();              
        mostrarCAI();
        
        //OBTENER ID Y NOMBRE DE EMPLEADO Y MOSTRARLO
        Txt_IdEmpleado.setText(daoEmpleados.findEmpleados(singleton.getCuenta().getIdEmpleados()).getNombreEmpleado());              
        
        //OBTENER Y GUARDAR CAI EN VARIABLE Y TXT
        int txt = consultarIDCai();        
        String texto= Integer.toString(txt);        
        Txt_IdCai.setText(texto);
        
        //OBTENER, FORMATEAR Y MOSTRAR FECHA ACTUAL        
        String fechaTexto = formatter.format(fecha);
        Txt_FechaFact.setText(fechaTexto);    
        
        //OBTENER Y FORMATEAR FECHA PARA BD
        String fechaDB = formatterBD.format(fechaBD);
        Txt_FechaBD.setText(fechaDB);  
        
        //INICIALIZAR TABLA DE PRODUCTOS Y FACTURA        
        t2 = (DefaultTableModel)jTable_Venta.getModel();
        t2.setRowCount(0);                 
        jTable_Venta.setModel(t2);                                        
    }
    
    private void hacerVenta()
    {           
        if(CBox_IdCliente.getSelectedItem().equals("Seleccione"))
        {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Cliente.","¡Error!", JOptionPane.ERROR_MESSAGE);            
        }else if(CBox_TipoPago.getSelectedItem().equals("Seleccione")){
            JOptionPane.showMessageDialog(null, "Debe seleccionar un método de pago.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else{            
            //OBTENER DATOS
            calcularValores();
            
            String fechaVenta = Txt_FechaBD.getText();            
            String idEmpleado = Txt_IdEmpleado.getText();
            int idVenta = Integer.parseInt(Txt_Fact.getText());
                        
            //Agregando formato a la fecha
            String fechaV = fechaVenta + " 00:00:00"; 
            
            //DATOS PAGO MIXTO
            if(CBox_TipoPago.getSelectedItem().equals("Efectivo"))
            {
                tarj = "";
                montoT = 0;
                montoE = 0;                                                
            }else{
                tarj = FmrPagoMixto.numTarjeta;
                montoT = FmrPagoMixto.canTarjeta;
                montoE = FmrPagoMixto.canEfectivo;                                
            }
            
            if(CBox_TipoPago.getSelectedItem().equals("Tarjeta"))
            {
                tarj = FmrTarjeta.nTarjeta;                    
            }
            
            objVenta.setIdVenta(idVenta);
            objVenta.setFechaVenta(Timestamp.valueOf(fechaV));            
            objVenta.setImpuesto(Double.parseDouble(Txt_Impuesto.getText()));
            objVenta.setSubTotal(Double.parseDouble(Txt_SubTotal.getText()));
            objVenta.setTotal(Double.parseDouble(Txt_TotalVenta.getText()));
            objVenta.setIdParametros(Integer.parseInt(Txt_IdCai.getText()));
            objVenta.setIdEmpleados(daoEmpleados.findEmpleados(singleton.getCuenta().getIdEmpleados()).getIdEmpleados());
            objVenta.setIdTipoDePago(getIdTipoPago(String.valueOf(CBox_TipoPago.getSelectedItem())));
            objVenta.setIdCliente(GetIdCliente(String.valueOf(CBox_IdCliente.getSelectedItem())));                                                           
            objVenta.setTarjeta(tarj);
            objVenta.setMontoTarjeta(montoT);            
            objVenta.setIdEstado(1);                                   
                        
            try{
                daoVenta.edit(objVenta); 
                JOptionPane.showMessageDialog(null, "Venta facturada.\nGenerando factura.", "Venta Realizad", 0, icono);                              
            }catch(Exception ex){
                Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);                
            }                        
            
            //DETALLE DE VENTA            
            for(int i = 0; i < jTable_Venta.getRowCount(); i++)
            {
                objDetalleVenta.setIdDetalleVenta(idDetalle);                
                objDetalleVenta.setCantidad(Integer.parseInt(String.valueOf(jTable_Venta.getValueAt(i,4))));
                objDetalleVenta.setIdVenta(idVenta);
                objDetalleVenta.setIdArticulo(Integer.parseInt(String.valueOf(jTable_Venta.getValueAt(i,0))));                
                objDetalleVenta.setIdTalla((GetIdTalla(String.valueOf(jTable_Venta.getValueAt(i,3)))));                
                objDetalleVenta.setPrecioArticulo(Double.parseDouble(jTable_Venta.getValueAt(i, 2).toString()));
                
                try{
                    daoDetalleVenta.edit(objDetalleVenta);                                        
                }catch(Exception ex){
                    Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);                    
                }
            }                        
            imprimirFactura();
            Inicializar();
        }        
    }
    
    public void listaClientes()
    {
        CBox_IdCliente.removeAllItems();
        
        List<Clientes> clientes = this.daoClientes.findClientesEntities();
        
        CBox_IdCliente.addItem("Seleccione");
        
        for(Clientes Clientes : clientes)
        {
            String lista = Clientes.getNombreCliente();
            CBox_IdCliente.addItem(lista);                                    
        }        
    }
    
    private static int GetIdCliente(String nombre)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT idCliente FROM Clientes WHERE nombreCliente = '"+nombre+ "'";
        Query query = em.createQuery(select);
    
        return Integer.parseInt(query.getSingleResult().toString());            
    }
    
    public void listaTipoPago()
    {
        CBox_TipoPago.removeAllItems();
        
        List<TipoDePago> tipopago = this.daoTipoPago.findTipoDePagoEntities();
        
        CBox_TipoPago.addItem("Seleccione");
        
        for(TipoDePago TipoDePago : tipopago)
        {
            String listaPago = TipoDePago.getNombreTipoDePago();
            CBox_TipoPago.addItem(listaPago);
        }                        
    }
        
    private static int getIdTipoPago(String nombre)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT idTipoDePago FROM TipoDePago WHERE nombreTipoDePago = '"+nombre+ "'";
        Query query = em.createQuery(select);
    
        return Integer.parseInt(query.getSingleResult().toString());                           
    }        
    
    private static String getIdEmpleado(int id)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT idEmpleados FROM Empleados WHERE idEmpleados = '"+id+ "'";
        Query query = em.createQuery(select);
        
        return query.getSingleResult().toString();          
    }
    
    private void retirarArticulo()
    {
        int fila = jTable_Venta.getSelectedRow();        
        
        if(fila != -1)
        {
            t2.removeRow(fila);  
            
            calcularValores();
            
            int filas = t2.getRowCount();                        
            
            if(filas == 0)
            {
                Btn_Venta.setEnabled(false);                
                Btn_Buscar.setEnabled(true);                
            }                        
        }else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar un artículo para retirarlo.","Error!", JOptionPane.ERROR_MESSAGE);
        }                
    }      
    
    private void cancelarVenta()
    {
        Txt_Cai.setText("");
        Txt_SubTotal.setText("");
        Txt_Impuesto.setText("");
        Txt_TotalVenta.setText("");        
        Inicializar();
    }                   
    
    private void añadirCantidad()
    {
        int cant = Integer.parseInt(Txt_Cantidad.getText());                
            
        if(cant <= 0)
        {
            JOptionPane.showMessageDialog(null, "La cantidad debe ser 1 o mas", "¡Error!", JOptionPane.ERROR_MESSAGE);            
        }else{
            int fila = jTable_Venta.getSelectedRow();                                                              
            
            Object columna = jTable_Venta.getValueAt(fila, 0);                       
            
            int id = Integer.parseInt((String) columna);
            
            Articulo s = this.daoArticulo.findArticulo(id);                        
            
            int stock = s.getStock();
            
            if(stock < cant)
            {
                JOptionPane.showMessageDialog(null, "No tenemos la cantidad deseada en existencia.\n"
                                                    + "La cantidad de stock para este artículo es: " + stock, "¡Error!", JOptionPane.ERROR_MESSAGE);
            }else{                                
                double prc = Double.parseDouble(t2.getValueAt(fila, 2).toString());            
                double tot = prc*cant;            
                t2.setValueAt(cant, fila, 4);                                   
                t2.setValueAt(tot, fila, 5);                                
                Txt_Cantidad.setText("1");
            }
        }   
    }        
    
    public void calcularValores()
    {           
        double sub = 0;
        double imp = 0;
        double total = 0;
        
        DecimalFormat formato1 = new DecimalFormat("#.00");
                        
        /*formato1.format(sub);
        formato1.format(imp);
        formato1.format(total);*/
        
        for(int i = 0; i<jTable_Venta.getRowCount(); i++)
        {
            sub = sub + Double.parseDouble(t2.getValueAt(i, 5).toString());
        }
        
        imp = sub * 0.15;  
        
        total = sub + imp;
        
        totalV = total;
        
        Txt_SubTotal.setText(String.valueOf(formato1.format(sub)));        
        Txt_Impuesto.setText(String.valueOf(formato1.format(imp)));        
        Txt_TotalVenta.setText(String.valueOf(formato1.format(total)));
        
        Btn_Venta.setEnabled(true);
        CBox_TipoPago.setEnabled(true);                     
    }   
    
    private void mostrarCAI()
    {        
        EntityManager em = daoParametros.getEntityManager();
        
        String hql = "FROM Parametros E WHERE E.idParametros = :idParametros AND E.ActivoParametros = 1";
        Query query = em.createQuery(hql);
        
        query.setParameter("idParametros", 1);
        
        Parametros id = (Parametros)query.getSingleResult();
        
        Txt_Cai.setText(id.getCai());
    }
    
    private int consultarIDCai()
    {
        EntityManager em = daoParametros.getEntityManager();
        
        String hql = "FROM Parametros E WHERE E.idParametros = :idParametros AND E.ActivoParametros = 1";
        Query query = em.createQuery(hql);
        
        query.setParameter("idParametros", 1);
        
        Parametros id = (Parametros)query.getSingleResult();                              
        
        int IDC = id.getIdParametros();              
        
        return IDC;
    }
    
    private void facturaID()
    {
        daoVenta.findVentaEntities();        
        
        int numFact = daoVenta.getVentaCount();
        
        if(factura <= numFact)
        {
            factura = numFact + 1;            
        }
        
        String fact = String.valueOf(factura);
        
        Txt_Fact.setText(fact);        
    }  
    
    private void idDetalleVenta()
    {
        daoDetalleVenta.findDetalleVentaEntities();
        
        int idDetalleV = daoDetalleVenta.getDetalleVentaCount();
        
        if(idDetalle <= idDetalleV)
        {
            idDetalle = idDetalleV + 1;            
        }
        
        JOptionPane.showMessageDialog(null, idDetalle);
    }
    
    public void imprimirFactura()
    {         
        Date date = objVenta.getFechaVenta();        
        
        List<Venta> listaFacturasBD = daoVenta.findVentaEntities();
        java.text.SimpleDateFormat formatoFecha = new java.text.SimpleDateFormat("dd/MM/yyyy");
        Venta facturaActual = listaFacturasBD.get(listaFacturasBD.size()-1);

        //DETALLES PRODUCTO
        EntityManager em = daoVenta.getEntityManager();
        
        String hqlDetalleProd = "FROM DetalleVenta E WHERE E.idVenta = :idFactura";
        Query queryDetalleProd = em.createQuery(hqlDetalleProd);
        queryDetalleProd.setParameter("idFactura",facturaActual.getIdVenta());
        List<DetalleVenta> detallesProd = queryDetalleProd.getResultList();                        
        
        Object[][] arrayDetallesFactura;
        arrayDetallesFactura = new Object[detallesProd.size()][3];      
    
        for(int i = 0; i < detallesProd.size(); i++)
        {        
            for(int j = 0; j < 3 ; j++)
            {            
                switch(j)
                {                
                    case 0: //ARTICULO
                        arrayDetallesFactura[i][0] = daoArticulo.findArticulo(detallesProd.get(i).getIdArticulo()).getNombreArticulo();                        
                    break;
                    
                    case 1: //PRECIO
                        arrayDetallesFactura[i][1] = daoArticulo.findArticulo(detallesProd.get(i).getIdArticulo()).getPrecioArticulo();                        
                    break;
                    
                    case 2: //CANTIDAD
                        arrayDetallesFactura[i][2] = detallesProd.get(i).getCantidad();
                    break;                                                               
                }            
            }
        }
        
        HashMap param = new HashMap();        
        param.put("Factura", "000-001-003-" + String.format("%0" + 8 + "d",facturaActual.getIdVenta()));
        param.put("Cliente", daoClientes.findClientes(facturaActual.getIdCliente()).getNombreCliente());                
        param.put("Fecha", formatoFecha.format(date));                        
        param.put("Empleado",daoEmpleados.findEmpleados(facturaActual.getIdEmpleados()).getNombreEmpleado());                        
        param.put("CAI", daoParametros.findParametros(facturaActual.getIdParametros()).getCai());
        param.put("Impuesto",0.15);
        param.put("SubTotal", daoVenta.findVenta(facturaActual.getIdVenta()).getSubTotal());        
        param.put("Total", daoVenta.findVenta(facturaActual.getIdVenta()).getTotal());         
        
        try {
            JasperReport reporteFactura = JasperCompileManager.compileReport("src/main/resources/Reports/FacturaVenta.jrxml");
            JasperPrint print = JasperFillManager.fillReport(
                    reporteFactura,
                    param, 
                    dataSource.getDataSource(arrayDetallesFactura));
            JasperViewer view = new JasperViewer(print,false);
            view.setVisible(true);
            view.setTitle("Factura " + facturaActual.getIdVenta());            
        } catch (JRException ex) {
            Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
    private static int GetIdTalla(String Nombre)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT idTalla FROM Talla WHERE nombreTalla = '"+ Nombre+ "'";
        Query query = em.createQuery(select);
    
        return Integer.parseInt(query.getSingleResult().toString());
    }         
    
    private void validarCAI()
    {
        Parametros CAI = null;
        
        List<Parametros> parametrosBD = daoParametros.findParametrosEntities();                
        
        //ULTIMA FACTURA
        Query query = daoParametros.getEntityManager().createQuery("FROM Venta ORDER BY idVenta DESC");
        query.setMaxResults(1);
        int numeroFactura = 0;
        
        try{
            Venta lastFactura = (Venta) query.getSingleResult();
            numeroFactura = lastFactura.getIdVenta() + 1;                    
        }catch(javax.persistence.NoResultException Ex){
            numeroFactura = 1;
        }
        
        Date fechaHoy = new Date(000000000);
        try{
            fechaHoy = formatter.parse(Txt_FechaFact.getText());
        }catch(ParseException ex){
            Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for(int i = 0 ; i < parametrosBD.size() ; i++)
        {
            if(parametrosBD.get(i).getFechaCaducidad().before(fechaHoy) || parametrosBD.get(i).getFacturaFinal() < numeroFactura)                    
            {
                Parametros parametro = daoParametros.findParametros(parametrosBD.get(i).getIdParametros());                
                parametro.setActivoParametros(false);                        
             
                try{
                    daoParametros.edit(parametro);
                }catch(Exception ex){
                    Logger.getLogger(FmrVentas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
            
        //ENCONTRAR LOS PARAMETROS QUE PUEDEN SER VALIDOS        
        Query queryParametrosActivos = daoParametros.getEntityManager().createQuery("FROM Parametros E WHERE E.ActivoParametros = :idEstado");
        queryParametrosActivos.setParameter("idEstado",true);
        List<Parametros> parametrosActivos = (List<Parametros>) queryParametrosActivos.getResultList();
        
        for(Parametros parametro : parametrosActivos)
        {
            if(fechaHoy.compareTo(parametro.getFechaEmision()) >= 0 && fechaHoy.compareTo(parametro.getFechaCaducidad()) <= 0 &&                    
                    numeroFactura >= parametro.getFacturaInicial() &&
                    numeroFactura <= parametro.getFacturaFinal())
            {
                CAI = parametro;
                Btn_Buscar.setEnabled(true);
            }else
            {
                Btn_Buscar.setEnabled(false);
            }
        }
            //22+20=42
        if(CAI == null)
        {
            JOptionPane.showMessageDialog(this,"No se encuentra un CAI válido para facturar.","CAI Expirado",JOptionPane.ERROR_MESSAGE);
            Btn_Buscar.setEnabled(false);            
            return;
        }else{
            LocalDate fechaFinal = convertToLocalDateViaInstant(CAI.getFechaCaducidad());            
            Period periodo = Period.between(LocalDate.now(),fechaFinal);
            System.out.println(periodo.getDays());
            
            if(periodo.getDays() < 3 )
            {
                JOptionPane.showMessageDialog(null,"El CAI actual está por expirar.","CAI Próximo a Vencer",JOptionPane.WARNING_MESSAGE);            
            }     
        }    
    }
    
    public LocalDate convertToLocalDateViaInstant(java.util.Date dateToConvert) {
    return dateToConvert.toInstant()
      .atZone(ZoneId.systemDefault())
      .toLocalDate();
    }                  
    
    private String verificarPermisos(int idUsuario, int Modulo)
    {       
        String result;
        
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT buscarV FROM Permisos WHERE IdUsuario = '"+ idUsuario+ "' AND IdModulo = '"+ Modulo+ "'";
        Query query = em.createQuery(select);                        
        
        try{
            result = query.getSingleResult().toString();
        }catch(javax.persistence.NoResultException ex){
            result = "false";
        }
        
        return result;
    }
           
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FmrVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FmrVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FmrVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FmrVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FmrVentas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Buscar;
    private javax.swing.JButton Btn_Cancelar;
    private javax.swing.JButton Btn_Cantidad;
    private javax.swing.JButton Btn_Regresar;
    private javax.swing.JButton Btn_Retirar;
    private javax.swing.JButton Btn_Venta;
    private javax.swing.JComboBox<String> CBox_IdCliente;
    private javax.swing.JComboBox<String> CBox_TipoPago;
    private javax.swing.JTextField Txt_Cai;
    private javax.swing.JTextField Txt_Cantidad;
    private javax.swing.JTextField Txt_Fact;
    private javax.swing.JTextField Txt_FechaBD;
    private javax.swing.JTextField Txt_FechaFact;
    private javax.swing.JTextField Txt_IdCai;
    private javax.swing.JTextField Txt_IdEmpleado;
    private javax.swing.JTextField Txt_Impuesto;
    private javax.swing.JTextField Txt_SubTotal;
    private javax.swing.JTextField Txt_TotalVenta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Venta;
    // End of variables declaration//GEN-END:variables
  
}
