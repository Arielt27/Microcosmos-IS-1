/*
 * Software de Facturación e Inventario desarrollado por el Grupo#1 
 * para la clase de Ingeniería de Software 1. 
 */
package com.screens;


//Imports
import com.clases.Articulo;
import com.clases.Articulo_SeccionTienda;
import com.clases.PrecioHistorico;
import com.clases.Talla;
import com.clases.SeccionTienda;
import com.dao.ArticuloJpaController;
import com.dao.Articulo_SeccionTiendaJpaController;
import com.dao.PrecioHistoricoJpaController;
import com.dao.SeccionTiendaJpaController;
import com.dao.TallaJpaController;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author david
 */
public class FmrArticulos extends javax.swing.JFrame {

    //Creando EntityManager
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
    
    //Declarando drivers
    TallaJpaController daoTalla = new TallaJpaController();
    ArticuloJpaController daoArticulo = new ArticuloJpaController();
    PrecioHistoricoJpaController daoPrecioH = new PrecioHistoricoJpaController();
    
    Articulo objArticulo = new Articulo();
    PrecioHistorico objPrecio = new PrecioHistorico();
    Articulo_SeccionTienda objArtSec = new Articulo_SeccionTienda();
    Articulo_SeccionTiendaJpaController daoSeccionT = new Articulo_SeccionTiendaJpaController();                         
    
    DecimalFormat formato1 = new DecimalFormat("#.00");
    
    Icon icono = new ImageIcon(getClass().getResource("/imagenes/guardar.png"));
    Icon iconoDA = new ImageIcon(getClass().getResource("/imagenes/estado.png"));
    
    double precioActual = 0;
    double precioNuevo = 0;
    
    DefaultTableModel t;   
    
    /**
     * Creates new form Articulos
     */
    public FmrArticulos() {
        initComponents();
        this.setLocationRelativeTo(null);              
        //Icono
        Image icon = new ImageIcon(getClass().getResource("/imagenes/IconoMicrocosmos.png")).getImage();
        setIconImage(icon);
        
        //INICIALIZAR PANTALLA
        actualizarArticulo();        
        listaTalla();
        listaFiltro();
        Txt_Activo.setVisible(false);        
        Btn_Editar.setEnabled(false);
        Btn_Activar_Desactivar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Tbl_Articulo = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Txt_IdArticulo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Txt_NombreArticulo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Txt_DescripcionArticulo = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        Txt_StockMin = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Txt_StockAct = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Txt_StockMax = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        ComboTalla = new javax.swing.JComboBox<>();
        Txt_Activo = new javax.swing.JTextField();
        Txt_PrecioArticulo = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        CBox_Filtro = new javax.swing.JComboBox<>();
        Txt_Campo = new javax.swing.JTextField();
        Btn_Buscar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Btn_Añadir = new javax.swing.JButton();
        Btn_Editar = new javax.swing.JButton();
        Btn_Activar_Desactivar = new javax.swing.JButton();
        Btn_Limpiar = new javax.swing.JButton();
        Btn_Regresar = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Artículos - Microcosmos");
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 600));

        Tbl_Articulo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Artículo", "Precio", "Descripción", "Talla", "Stock", "Mínimo", "Máximo", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tbl_Articulo.getTableHeader().setReorderingAllowed(false);
        Tbl_Articulo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tbl_ArticuloMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tbl_Articulo);
        if (Tbl_Articulo.getColumnModel().getColumnCount() > 0) {
            Tbl_Articulo.getColumnModel().getColumn(0).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(0).setPreferredWidth(10);
            Tbl_Articulo.getColumnModel().getColumn(1).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(1).setPreferredWidth(130);
            Tbl_Articulo.getColumnModel().getColumn(2).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(2).setPreferredWidth(40);
            Tbl_Articulo.getColumnModel().getColumn(3).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(3).setPreferredWidth(170);
            Tbl_Articulo.getColumnModel().getColumn(4).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(4).setPreferredWidth(20);
            Tbl_Articulo.getColumnModel().getColumn(5).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(5).setPreferredWidth(30);
            Tbl_Articulo.getColumnModel().getColumn(6).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(6).setPreferredWidth(30);
            Tbl_Articulo.getColumnModel().getColumn(7).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(7).setPreferredWidth(30);
            Tbl_Articulo.getColumnModel().getColumn(8).setResizable(false);
            Tbl_Articulo.getColumnModel().getColumn(8).setPreferredWidth(50);
        }

        jPanel1.setBackground(new java.awt.Color(49, 49, 49));
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 100));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 100));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/LogoMicrocosmos.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(60, 63, 65));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setMaximumSize(new java.awt.Dimension(800, 230));
        jPanel2.setMinimumSize(new java.awt.Dimension(800, 230));
        jPanel2.setPreferredSize(new java.awt.Dimension(800, 230));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Ingresar Datos");
        jLabel5.setMaximumSize(new java.awt.Dimension(299, 41));
        jLabel5.setPreferredSize(new java.awt.Dimension(299, 41));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("ID Artículo");
        jLabel2.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel2.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel2.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_IdArticulo.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Nombre Artículo");
        jLabel3.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel3.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_NombreArticulo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_NombreArticuloKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Descripción");
        jLabel4.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel4.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel4.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_DescripcionArticulo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_DescripcionArticuloKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Precio Artículo");
        jLabel6.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel6.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel6.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Stock Mínimo");
        jLabel10.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel10.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel10.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_StockMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_StockMinKeyTyped(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Stock Actual");
        jLabel9.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel9.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel9.setPreferredSize(new java.awt.Dimension(120, 20));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Stock Máximo");
        jLabel12.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel12.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel12.setPreferredSize(new java.awt.Dimension(120, 20));

        Txt_StockMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_StockMaxKeyTyped(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Talla");
        jLabel13.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel13.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel13.setPreferredSize(new java.awt.Dimension(120, 20));

        ComboTalla.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));

        Txt_Activo.setMinimumSize(new java.awt.Dimension(0, 0));
        Txt_Activo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Txt_ActivoActionPerformed(evt);
            }
        });

        Txt_PrecioArticulo.setPreferredSize(new java.awt.Dimension(60, 20));
        Txt_PrecioArticulo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_PrecioArticuloKeyTyped(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Filtra Por:");
        jLabel14.setMaximumSize(new java.awt.Dimension(120, 20));
        jLabel14.setMinimumSize(new java.awt.Dimension(120, 20));
        jLabel14.setPreferredSize(new java.awt.Dimension(120, 20));

        CBox_Filtro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione" }));
        CBox_Filtro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBox_FiltroActionPerformed(evt);
            }
        });

        Txt_Campo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                Txt_CampoKeyTyped(evt);
            }
        });

        Btn_Buscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Lupa.png"))); // NOI18N
        Btn_Buscar.setFocusPainted(false);
        Btn_Buscar.setMaximumSize(new java.awt.Dimension(55, 22));
        Btn_Buscar.setMinimumSize(new java.awt.Dimension(55, 22));
        Btn_Buscar.setPreferredSize(new java.awt.Dimension(55, 22));
        Btn_Buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_BuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(250, Short.MAX_VALUE)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(249, 249, 249))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Txt_NombreArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Txt_IdArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(Txt_PrecioArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CBox_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Txt_DescripcionArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(368, 368, 368)
                        .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(Btn_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Txt_StockMax)
                    .addComponent(Txt_StockMin)
                    .addComponent(Txt_StockAct)
                    .addComponent(ComboTalla, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Txt_Campo))
                .addGap(100, 100, 100))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_IdArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Txt_StockAct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Txt_NombreArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_StockMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_StockMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Txt_PrecioArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ComboTalla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Txt_DescripcionArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(CBox_Filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Txt_Campo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(Btn_Buscar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 115, Short.MAX_VALUE)
                        .addComponent(Txt_Activo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        jPanel3.setBackground(new java.awt.Color(60, 63, 65));
        jPanel3.setMaximumSize(new java.awt.Dimension(800, 130));
        jPanel3.setMinimumSize(new java.awt.Dimension(800, 130));

        Btn_Añadir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/anadir.png"))); // NOI18N
        Btn_Añadir.setText(" Añadir");
        Btn_Añadir.setToolTipText("Añade un nuevo artículo si los campos están correctamente rellenados.");
        Btn_Añadir.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Añadir.setFocusPainted(false);
        Btn_Añadir.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_AñadirActionPerformed(evt);
            }
        });

        Btn_Editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizar.png"))); // NOI18N
        Btn_Editar.setText(" Actualizar");
        Btn_Editar.setToolTipText("Actualiza algunos datos del artículo seleccionado.");
        Btn_Editar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Editar.setFocusPainted(false);
        Btn_Editar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Editar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_EditarActionPerformed(evt);
            }
        });

        Btn_Activar_Desactivar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/estado.png"))); // NOI18N
        Btn_Activar_Desactivar.setText(" Desactivar");
        Btn_Activar_Desactivar.setToolTipText("Activa o desactiva el artículo seleccionado.");
        Btn_Activar_Desactivar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Activar_Desactivar.setFocusPainted(false);
        Btn_Activar_Desactivar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Activar_Desactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_Activar_DesactivarActionPerformed(evt);
            }
        });

        Btn_Limpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        Btn_Limpiar.setText(" Limpiar");
        Btn_Limpiar.setToolTipText("Borra los datos de todos los campos.");
        Btn_Limpiar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Limpiar.setFocusPainted(false);
        Btn_Limpiar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_LimpiarActionPerformed(evt);
            }
        });

        Btn_Regresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/regresar.png"))); // NOI18N
        Btn_Regresar.setText(" Regresar");
        Btn_Regresar.setToolTipText("Regresa a la pantalla de Menú Principal.");
        Btn_Regresar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 255)));
        Btn_Regresar.setFocusPainted(false);
        Btn_Regresar.setMaximumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setMinimumSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.setPreferredSize(new java.awt.Dimension(120, 50));
        Btn_Regresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_RegresarActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Acciones");
        jLabel11.setMaximumSize(new java.awt.Dimension(265, 25));
        jLabel11.setMinimumSize(new java.awt.Dimension(265, 25));
        jLabel11.setPreferredSize(new java.awt.Dimension(265, 25));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Btn_Añadir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(Btn_Editar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(Btn_Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(Btn_Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(260, 260, 260))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Btn_Editar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Activar_Desactivar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Limpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Regresar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Añadir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //VALIDACIONES CAMPOS
    private void Txt_NombreArticuloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_NombreArticuloKeyTyped

        
        char l = evt.getKeyChar();
        String Texto = Txt_NombreArticulo.getText();
        
        // Primera letra mayúscula
        if (Txt_NombreArticulo.getText().length() == 1){

            char mayuscula = Texto.charAt(0);
            Texto = Character.toUpperCase(mayuscula)+ Texto.substring(1,Texto.length());
            Txt_NombreArticulo.setText(Texto);
        }
        
        // Bloquear carácteres especiales menos espacio
        if (!Character.isLetter(l) && l != KeyEvent.VK_SPACE)
        {
            evt.consume();            
        }
        
        // Maximo de carácteres permitidos
        if (Txt_NombreArticulo.getText().length() >= 25)
        {
            evt.consume();     
            Toolkit.getDefaultToolkit().beep();
        }  
    }//GEN-LAST:event_Txt_NombreArticuloKeyTyped
    
    private void Txt_ActivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Txt_ActivoActionPerformed

    }//GEN-LAST:event_Txt_ActivoActionPerformed

    private void Txt_PrecioArticuloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_PrecioArticuloKeyTyped
        
        char n = evt.getKeyChar();
        
        // Permitir solo números y puntos
        if (!Character.isDigit(n) && n != KeyEvent.VK_PERIOD)
        {
            evt.consume();            
        }
        
        // Máximo de carácteres
        if (Txt_PrecioArticulo.getText().length() >= 8)
        {
            evt.consume();     
            Toolkit.getDefaultToolkit().beep();
        } 
    }//GEN-LAST:event_Txt_PrecioArticuloKeyTyped

    private void Txt_DescripcionArticuloKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_DescripcionArticuloKeyTyped
        
        char l = evt.getKeyChar();
        String Txt = Txt_DescripcionArticulo.getText();
        
        // Primera letra masyúscula
        if (Txt_DescripcionArticulo.getText().length() == 1)
        {
            char mayus = Txt.charAt(0);
            Txt = Character.toUpperCase(mayus)+ Txt.substring(1,Txt.length());
            Txt_DescripcionArticulo.setText(Txt);
        }
        
        // Bloquear carácteres especiales menos espacio
        if (!Character.isLetter(l) && !Character.isDigit(l) && l != KeyEvent.VK_SPACE && l != KeyEvent.VK_COMMA)
        {
            evt.consume();                        
        }

        // Máximo de carácteres permitidos
        if (Txt_DescripcionArticulo.getText().length() >= 45)
        {
            evt.consume();        
            Toolkit.getDefaultToolkit().beep();
        }     
    }//GEN-LAST:event_Txt_DescripcionArticuloKeyTyped

    private void Txt_StockMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_StockMinKeyTyped
        
        char n = evt.getKeyChar();
        
        // Permitir solo números
        if (!Character.isDigit(n))
        {
            evt.consume();            
        }
        
        // Máximo de carácteres
        if (Txt_StockMin.getText().length() >= 4)
        {
            evt.consume();     
            Toolkit.getDefaultToolkit().beep();
        }               
    }//GEN-LAST:event_Txt_StockMinKeyTyped

    private void Txt_StockMaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_StockMaxKeyTyped
        
        char n = evt.getKeyChar();
        
        // Permitir solo números
        if (!Character.isDigit(n))
        {
            evt.consume();            
        }
        
        // Máximo de carácteres
        if (Txt_StockMin.getText().length() >= 4)
        {
            evt.consume();     
            Toolkit.getDefaultToolkit().beep();
        }           
    }//GEN-LAST:event_Txt_StockMaxKeyTyped

    //FUNCIONES BOTONES
    private void Btn_RegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_RegresarActionPerformed
        
        FmrMenú M = new FmrMenú();
        M.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_Btn_RegresarActionPerformed

    private void Btn_LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_LimpiarActionPerformed
        
        LimpiarArticulo();
        
    }//GEN-LAST:event_Btn_LimpiarActionPerformed

    private void Btn_Activar_DesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_Activar_DesactivarActionPerformed
        
        int fila = Tbl_Articulo.getSelectedRow();

        if(fila != -1)
        {
            Activar_Desactivar();
        }else{
            JOptionPane.showMessageDialog(null, "Debe seleccionar un artículo para realizar esta acción.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_Btn_Activar_DesactivarActionPerformed

    private void Btn_EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_EditarActionPerformed
         
        int fila = Tbl_Articulo.getSelectedRow();
        
        if(fila == -1)
        {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un artículo para realizar esta acción.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else{
            EditarArticulo();
            
            //DESPUES DE EDITAR ARTICULO, OBTENGO EL PRECIO NUEVO Y LO COMPARO CON EL ACTUAL,
            //SI SON DISTINTOS, GUARDO EL PRECIOACTUAL EN EL PRECIO HISTORICO
            precioNuevo = Double.parseDouble(Txt_PrecioArticulo.getText());            
            //JOptionPane.showMessageDialog(null, "Nuevo: " + precioNuevo);
            
            if(precioActual != precioNuevo)
            {
                //OBTENER Y FORMATEAR FECHA ACTUAL 
                Date fecha = new Date(Calendar.getInstance().getTimeInMillis());
                SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                String fechaTexto = formatter.format(fecha);
                String fechaH = fechaTexto + " 00:00:00"; 
                
                //OBTENER Y PARSEAR A STRING EL IDARTICULO
                int idArt = (int) Tbl_Articulo.getValueAt(fila, 0);
                
                //JOptionPane.showMessageDialog(null, fechaTexto);                                                                
                
                objPrecio.setPrecio(precioActual);
                objPrecio.setFechaInicial(Timestamp.valueOf(fechaH));
                objPrecio.setFechaFinal(Timestamp.valueOf(fechaH));                
                objPrecio.setActivoPrecioHistorico(true);
                objPrecio.setIdArticulo(idArt);
                
                try{
                    daoPrecioH.edit(objPrecio);                    
                }catch(Exception ex){
                    Logger.getLogger(FmrArticulos.class.getName()).log(Level.SEVERE, null, ex);                    
                }
                
            }           
            LimpiarArticulo();            
        }        
    }//GEN-LAST:event_Btn_EditarActionPerformed

    private void Btn_AñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_AñadirActionPerformed
        
        LlenarArticulo();
        
    }//GEN-LAST:event_Btn_AñadirActionPerformed

    private void Tbl_ArticuloMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tbl_ArticuloMouseClicked

        int fila =  Tbl_Articulo.getSelectedRow();
        
        if(fila == -1)
        {        
            JOptionPane.showMessageDialog(null, "Debe seleccionar un artículo.","¡Aviso!", JOptionPane.WARNING_MESSAGE);
        }else{                                   
            Btn_Añadir.setEnabled(false);
            Btn_Limpiar.setEnabled(true);
            Btn_Editar.setEnabled(true);
            Btn_Activar_Desactivar.setEnabled(true);
        
            String Id = Tbl_Articulo.getValueAt(fila, 0).toString();
            String Nombre = Tbl_Articulo.getValueAt(fila, 1).toString();
            String Precio = Tbl_Articulo.getValueAt(fila, 2).toString();
            String Destripcion = Tbl_Articulo.getValueAt(fila, 3).toString();
            String Talla= Tbl_Articulo.getValueAt(fila, 4).toString();
            String StockAct= Tbl_Articulo.getValueAt(fila, 5).toString();
            String StockMin = Tbl_Articulo.getValueAt(fila, 6).toString();
            String StockMax = Tbl_Articulo.getValueAt(fila, 7).toString();
            String Activo = Tbl_Articulo.getValueAt(fila, 8).toString();                

            Txt_IdArticulo.setText(Id);
            Txt_NombreArticulo.setText(Nombre);
            Txt_PrecioArticulo.setText(Precio);            
            Txt_DescripcionArticulo.setText(Destripcion);
            ComboTalla.setSelectedItem(Talla);
            Txt_StockAct.setText(StockAct);
            Txt_StockMin.setText(StockMin);
            Txt_StockMax.setText(StockMax);        
            Txt_Activo.setText(Activo);
            
            precioActual = Double.parseDouble(Txt_PrecioArticulo.getText());             
        
        if(Activo == "Activado")
        {
            Btn_Activar_Desactivar.setText("Desactivar");
        }else{
            Btn_Activar_Desactivar.setText("Activar");
            }               
        Txt_StockAct.setEditable(false);
        }
    }//GEN-LAST:event_Tbl_ArticuloMouseClicked

    private void CBox_FiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBox_FiltroActionPerformed

        seleccionCBox();

    }//GEN-LAST:event_CBox_FiltroActionPerformed

    private void Txt_CampoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Txt_CampoKeyTyped

        char n = evt.getKeyChar();

        // Bloquear carácteres especiales menos espacio
        if (!Character.isDigit(n))
        {
            evt.consume();
        }

    }//GEN-LAST:event_Txt_CampoKeyTyped

    private void Btn_BuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_BuscarActionPerformed

        int busquedaID = Integer.parseInt(Txt_Campo.getText());
        consultarIDArt(busquedaID);

    }//GEN-LAST:event_Btn_BuscarActionPerformed
      
    //MÉTODOS
    private void actualizarArticulo()
    {
        t = (DefaultTableModel)Tbl_Articulo.getModel();
        t.setRowCount(0);         
        Tbl_Articulo.setModel(t);                
        
        List<Articulo> articulo = this.daoArticulo.findArticuloEntities();
        
        String s;
        for(Articulo Articulos : articulo)
        {
            if(Articulos.isActivoArticulo() == true)
            {
                s = "Activado";
            }else{
                s = "Desactivado";
            }            
            
            t.addRow(
                    new Object[]{
                        Articulos.getIdArticulo(),
                        Articulos.getNombreArticulo(),
                        Articulos.getPrecioArticulo(), 
                        Articulos.getDescripcionArticulo(), 
                        GetNombreTalla(Articulos.getIdTalla()),                        
                        Articulos.getStock(),
                        Articulos.getStockMinimo(),
                        Articulos.getStockMaximo(),                    
                        s                        
                    });                   
        }
        
    }        
        
    private void LlenarArticulo()
    {     
        if(Txt_NombreArticulo.getText().length() < 4)
        {       
            JOptionPane.showMessageDialog(null, "El nombre tiene que contener al menos 4 letras.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(ValidacionTresLetras(Txt_NombreArticulo.getText()) == true){                        
            JOptionPane.showMessageDialog(null, "El nombre del artículo no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);                    
        }else if(Txt_PrecioArticulo.getText().length() < 2){
            JOptionPane.showMessageDialog(null, "Debe añadir un precio al artículo y debe ser de 2 dígitos mínimo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Txt_DescripcionArticulo.getText().length() <= 8){
            JOptionPane.showMessageDialog(null, "La descripción del artículo debe contener mínimo 8 carácteres.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(ValidacionTresLetras(Txt_DescripcionArticulo.getText()) == true){                        
            JOptionPane.showMessageDialog(null, "La descripcion no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);                    
        }else if(Txt_StockAct.getText().equals("")){            
            JOptionPane.showMessageDialog(null, "El campo stock actual no puede estar vacío.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Txt_StockMin.getText().equals("")){            
            JOptionPane.showMessageDialog(null, "El campo stock mínimo no puede estar vacío.","¡Error!", JOptionPane.ERROR_MESSAGE);                        
        }else if(Txt_StockMax.getText().equals("")){            
            JOptionPane.showMessageDialog(null, "El campo stock máximo no puede estar vacío.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockAct.getText()) == 0){
            JOptionPane.showMessageDialog(null, "El stock actual no puede ser 0.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMin.getText()) == 0){
            JOptionPane.showMessageDialog(null, "El Stock mínimo no puede ser 0.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMax.getText()) == 0){
            JOptionPane.showMessageDialog(null, "El stock máximo no puede ser 0.","¡Error!", JOptionPane.ERROR_MESSAGE);            
        }else if(Integer.parseInt(Txt_StockAct.getText()) > Integer.parseInt(Txt_StockMax.getText())){
            JOptionPane.showMessageDialog(null, "El stock actual no puede ser mayor que el stock máximo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMax.getText()) <= Integer.parseInt(Txt_StockMin.getText())){
            JOptionPane.showMessageDialog(null, "El stock máximo no puede ser menor o igual que el stock mínimo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMax.getText()) < Integer.parseInt(Txt_StockAct.getText())){
            JOptionPane.showMessageDialog(null, "El stock máximo no puede ser menor que el stock actual.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMin.getText()) > Integer.parseInt(Txt_StockAct.getText())){
            JOptionPane.showMessageDialog(null, "El stock mínimo no puede ser mayor que el stock actual.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMin.getText()) > Integer.parseInt(Txt_StockMax.getText())){
            JOptionPane.showMessageDialog(null, "El stock mínimo no puede ser mayor que el stock máximo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if("Seleccione".equals(String.valueOf(ComboTalla.getSelectedItem()))){
            JOptionPane.showMessageDialog(null, "Debe seleccionar una talla para el artículo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(ValidacionDeRepetidos(Txt_NombreArticulo.getText()) == true){            
            JOptionPane.showMessageDialog(null, "Este artículo ya está registrado anteriormente.","!Error¡", JOptionPane.ERROR_MESSAGE);                                        
        }else{
            objArticulo.setNombreArticulo(Txt_NombreArticulo.getText());
            objArticulo.setPrecioArticulo(Double.parseDouble(Txt_PrecioArticulo.getText()));
            objArticulo.setDescripcionArticulo(Txt_DescripcionArticulo.getText());
            objArticulo.setIdTalla(GetIdTalla(String.valueOf(ComboTalla.getSelectedItem())));
            objArticulo.setStock(Integer.parseInt(Txt_StockAct.getText()));
            objArticulo.setStockMinimo(Integer.parseInt(Txt_StockMin.getText()));
            objArticulo.setStockMaximo(Integer.parseInt(Txt_StockMax.getText()));
            objArticulo.setActivoArticulo(true);            
            
            try{
                daoArticulo.create(objArticulo);
                actualizarArticulo();
                LimpiarArticulo();
                JOptionPane.showMessageDialog(null, "Datos guardados correctamente.", "Artículos", 0, icono);                
            }catch (Exception ex){
                Logger.getLogger(FmrArticulos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }                
    }
    
    public void listaTalla()
    {
        ComboTalla.removeAllItems();
        
        List<Talla> Tallas = this.daoTalla.findTallaEntities(); 
        ComboTalla.addItem("Seleccione");
      
        Tallas.stream().map((Talla) -> Talla.getNombreTalla()).forEachOrdered((lista) -> 
        {            
            ComboTalla.addItem(lista);            
        });
    }
    
    private static int GetIdTalla(String Nombre)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT idTalla FROM Talla WHERE nombreTalla = '"+ Nombre+ "'";
        Query query = em.createQuery(select);
    
        return Integer.parseInt(query.getSingleResult().toString());
    }    
    
    private static String GetNombreTalla(int id)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT nombreTalla FROM Talla WHERE idTalla = '"+ id+ "'";
        Query query = em.createQuery(select);
    
        return query.getSingleResult().toString() ;  
    } 

    private void LimpiarArticulo()
    {
        Txt_IdArticulo.setText("");
        Txt_NombreArticulo.setText("");        
        Txt_PrecioArticulo.setText("");
        Txt_DescripcionArticulo.setText("");
        ComboTalla.setSelectedIndex(0);        
        Txt_StockAct.setText("");
        Txt_StockAct.setEditable(true);
        Txt_StockMin.setText("");
        Txt_StockMax.setText("");                
        Btn_Editar.setEnabled(false);
        Btn_Añadir.setEnabled(true);
        Btn_Activar_Desactivar.setEnabled(false);          
        CBox_Filtro.setSelectedItem("Seleccione");
        Txt_Campo.setText("");    
        actualizarArticulo();
    }
    
    private void Activar_Desactivar()
    {
        int fila = Tbl_Articulo.getSelectedRow();        
        
        if(Txt_Activo.getText().equals("Activado"))
        {
            objArticulo.setIdArticulo(Integer.parseInt(Txt_IdArticulo.getText()));
            objArticulo.setNombreArticulo(Tbl_Articulo.getValueAt(fila, 1).toString());
            objArticulo.setPrecioArticulo(Double.parseDouble(Tbl_Articulo.getValueAt(fila, 2).toString()));
            objArticulo.setDescripcionArticulo(Tbl_Articulo.getValueAt(fila, 3).toString());
            objArticulo.setIdTalla(GetIdTalla(Tbl_Articulo.getValueAt(fila, 4).toString()));
            objArticulo.setStock(Integer.parseInt(Tbl_Articulo.getValueAt(fila, 5).toString()));
            objArticulo.setStockMinimo(Integer.parseInt(Tbl_Articulo.getValueAt(fila, 6).toString()));
            objArticulo.setStockMaximo(Integer.parseInt(Tbl_Articulo.getValueAt(fila, 7).toString()));            
            objArticulo.setActivoArticulo(false);
          
                 
            try{
                daoArticulo.edit(objArticulo);
                actualizarArticulo();
                Btn_Activar_Desactivar.setText("Activar");
                JOptionPane.showMessageDialog(null, "Se desactivó correctamente.", "Artículos", 0, iconoDA);                
            }catch(Exception ex){
                Logger.getLogger(FmrTipoPago.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            LimpiarArticulo();
                      
        }else{
            objArticulo.setIdArticulo(Integer.parseInt(Txt_IdArticulo.getText()));
            objArticulo.setNombreArticulo(Tbl_Articulo.getValueAt(fila, 1).toString());
            objArticulo.setPrecioArticulo(Double.parseDouble(Tbl_Articulo.getValueAt(fila, 2).toString()));
            objArticulo.setDescripcionArticulo(Tbl_Articulo.getValueAt(fila, 3).toString());
            objArticulo.setIdTalla(GetIdTalla(Tbl_Articulo.getValueAt(fila, 4).toString()));
            objArticulo.setStock(Integer.parseInt(Tbl_Articulo.getValueAt(fila, 5).toString()));
            objArticulo.setStockMinimo(Integer.parseInt(Tbl_Articulo.getValueAt(fila, 6).toString()));
            objArticulo.setStockMaximo(Integer.parseInt(Tbl_Articulo.getValueAt(fila, 7).toString()));                            
            objArticulo.setActivoArticulo(true);
            
            try{
                daoArticulo.edit(objArticulo);
                actualizarArticulo();
                Btn_Activar_Desactivar.setText("Desactivar");                
                JOptionPane.showMessageDialog(null, "Se activó correctamente.", "Artículos", 0, iconoDA);
            }catch(Exception ex){
            Logger.getLogger(FmrTipoPago.class.getName()).log(Level.SEVERE, null, ex);
            }                
        LimpiarArticulo();        
        }                               
    }           
        
    private void EditarArticulo()
    {
        boolean status = true;     
                        
        if(Txt_NombreArticulo.getText().length() < 3)
        {
            JOptionPane.showMessageDialog(null, "El nombre tiene que contener al menos 3 letras.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(ValidacionTresLetras(Txt_NombreArticulo.getText()) == true){                        
            JOptionPane.showMessageDialog(null, "El nombre del artículo no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);                    
        }else if(Txt_PrecioArticulo.getText().length() < 2){
            JOptionPane.showMessageDialog(null, "El artículo debe tener un precio de 2 dígitos.","¡Error!", JOptionPane.ERROR_MESSAGE);            
        }else if(Txt_DescripcionArticulo.getText().length() < 8){
            JOptionPane.showMessageDialog(null, "La descripcion  debe de contener mínimo 8 carácteres.","¡Error!", JOptionPane.ERROR_MESSAGE);            
        }else if(ValidacionTresLetras(Txt_DescripcionArticulo.getText()) == true){                        
            JOptionPane.showMessageDialog(null, "La descripción no puede tener caracteres repetidos consecutivos.","!Error¡", JOptionPane.ERROR_MESSAGE);                    
        }else if(Txt_StockAct.getText().equals("")){            
            JOptionPane.showMessageDialog(null, "El campo stock actual no puede estar vacío.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockAct.getText()) == 0){
            JOptionPane.showMessageDialog(null, "El stock actual no puede ser 0.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockAct.getText()) >= Integer.parseInt(Txt_StockMax.getText())){
            JOptionPane.showMessageDialog(null, "El stock actual no puede ser mayor que el stock máximo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Txt_StockMax.getText().equals("")){            
            JOptionPane.showMessageDialog(null, "El campo stock máximo no puede estar vacío.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockAct.getText()) == 0){
            JOptionPane.showMessageDialog(null, "El stock máximo no puede ser 0.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMax.getText()) <= Integer.parseInt(Txt_StockMin.getText())){
            JOptionPane.showMessageDialog(null, "El stock máximo no puede ser menor o igual que el stock mínimo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Txt_StockMin.getText().equals("")){            
            JOptionPane.showMessageDialog(null, "El campo stock mínimo no puede estar vacío.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(Integer.parseInt(Txt_StockMin.getText()) >= Integer.parseInt(Txt_StockMax.getText())){
            JOptionPane.showMessageDialog(null, "El stock mínimo no puede ser mayor que el stock máximo.","¡Error!", JOptionPane.ERROR_MESSAGE);
        }else if(String.valueOf(ComboTalla.getSelectedItem()) == "Seleccione"){
            JOptionPane.showMessageDialog(null, "Debe seleccionar una talla para el artículo.","¡Error!", JOptionPane.ERROR_MESSAGE);            
        }else{            
            objArticulo.setIdArticulo(Integer.parseInt(Txt_IdArticulo.getText()));
            objArticulo.setNombreArticulo(Txt_NombreArticulo.getText());
            objArticulo.setPrecioArticulo(Double.parseDouble(Txt_PrecioArticulo.getText()));
            objArticulo.setDescripcionArticulo(Txt_DescripcionArticulo.getText());
            objArticulo.setIdTalla(GetIdTalla(String.valueOf(ComboTalla.getSelectedItem())));
            objArticulo.setStock(Integer.parseInt(Txt_StockAct.getText()));
            objArticulo.setStockMinimo(Integer.parseInt(Txt_StockMin.getText()));
            objArticulo.setStockMaximo(Integer.parseInt(Txt_StockMax.getText()));                                               
            
            if(Txt_Activo.getText().equals("Activado"))
            {
                status = true;                                
            }else{
                status = false;
            }
            
            objArticulo.setActivoArticulo(status);  
                                  
            try{
                daoArticulo.edit(objArticulo);
                actualizarArticulo();                
                JOptionPane.showMessageDialog(null, "Se actualizó correctamente.", "Artículos", 0, icono);
            }catch(Exception ex){
                Logger.getLogger(FmrClientes.class.getName()).log(Level.SEVERE, null, ex);
            }                                                                               
        }
    }             
    
    private static int GetIdSeccion(String Nombre)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT idSeccion FROM SeccionTienda WHERE nombreSeccion = '"+ Nombre+ "'";
        Query query = em.createQuery(select);
    
        return Integer.parseInt(query.getSingleResult().toString());        
    }
    
    private static String GetNombreSeccion(int id)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
        
        String select = "SELECT nombreSeccion FROM SeccionTienda WHERE idSeccion = '"+ id+ "'";
        Query query = em.createQuery(select);
    
        return query.getSingleResult().toString() ;         
    } 
    
    private static boolean ValidacionTresLetras(String Nombre)
    {
        if(Nombre.length() >= 3)
        {
            String Letra1 = Nombre.substring(0, 1);
            String Letra2 = Nombre.substring(1, 2);
            String Letra3 = Nombre.substring(2, 3);
            String Letra4 = Nombre.substring(3, 4);
            String Letra5 = Nombre.substring(4, 5);
            String Letra6 = Nombre.substring(5, 6);
            String Letra7 = Nombre.substring(6, 7);
            String Letra8 = Nombre.substring(7, 8);
            String Letra9 = Nombre.substring(8, 9);
            String Letra10 = Nombre.substring(9, 10);
            String Letra11 = Nombre.substring(10, 11);
            String Letra12 = Nombre.substring(11, 12);
            String Letra13 = Nombre.substring(12, 13);
            String Letra14 = Nombre.substring(13, 14);
            String Letra15 = Nombre.substring(14, 15);
               
            if(Letra1.equalsIgnoreCase(Letra2) && Letra2.equalsIgnoreCase(Letra3) && Letra3.equalsIgnoreCase(Letra4)
                || Letra4.equalsIgnoreCase(Letra5) && Letra5.equalsIgnoreCase(Letra6) && Letra6.equalsIgnoreCase(Letra7)
                || Letra7.equalsIgnoreCase(Letra8) && Letra8.equalsIgnoreCase(Letra9) && Letra9.equalsIgnoreCase(Letra10)
                || Letra10.equalsIgnoreCase(Letra11) && Letra11.equalsIgnoreCase(Letra12) && Letra12.equalsIgnoreCase(Letra13)
                || Letra13.equalsIgnoreCase(Letra14) && Letra14.equalsIgnoreCase(Letra15))
            {
                return true;
            }else{
                return false;              
            }
        }else{
            return false;        
        }              
    }
    
    public static boolean ValidacionDeRepetidos(String Nombre)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("DB");
        EntityManager em = emf.createEntityManager();
      
        String select = "SELECT IdArticulo FROM Articulo WHERE NombreArticulo  = '"+Nombre+ "'";
   
        Query query = em.createQuery(select);
       
        if(query.getResultList().size() == 0)
        {                         
            return false;           
        }else{             
            return true;                
        }            
    }
    
    public void listaFiltro()
    {
        CBox_Filtro.addItem("ID");
        CBox_Filtro.addItem("Nombre");
    }
                
    private void consultarIDArt(int idB)
    {                                       
        t = (DefaultTableModel)Tbl_Articulo.getModel();
        t.setRowCount(0);           
        Tbl_Articulo.setModel(t);                               
        
        List<Articulo> articulo = this.daoArticulo.findArticuloEntities();
        
        String s = "1";
        for(Articulo Articulos : articulo)
        {
            if(Articulos.getIdArticulo() == idB && Articulos.isActivoArticulo())
            {
                t.addRow(
                        new Object[]{
                        Articulos.getIdArticulo(),
                        Articulos.getNombreArticulo(),
                        Articulos.getStockMinimo(),                        
                        Articulos.getStock(),
                        Articulos.getDescripcionArticulo(),
                        Articulos.getPrecioArticulo(),                             
                        Articulos.getIdTalla(),
                        Articulos.isActivoArticulo(),
                        s                       
                        });                        
            }
        }

        int filas = Tbl_Articulo.getRowCount();               
        
        if(filas == 0)
        {
            JOptionPane.showMessageDialog(null, "No existe un artículo con ese ID.");            
        }
    }
    
    private void consultarNombreArt(String nombreAB)
    {
        t = (DefaultTableModel)Tbl_Articulo.getModel();
        t.setRowCount(0);           
        Tbl_Articulo.setModel(t);                               
        
        List<Articulo> articulo = this.daoArticulo.findArticuloEntities();
        
        String s = "Activado";
        for(Articulo Articulos : articulo)
        {
            if(Articulos.getNombreArticulo().equals(nombreAB) && Articulos.isActivoArticulo())
            {
                t.addRow(
                        new Object[]{
                        Articulos.getIdArticulo(),
                        Articulos.getNombreArticulo(),
                        Articulos.getStockMinimo(),                        
                        Articulos.getStock(),
                        Articulos.getDescripcionArticulo(),
                        Articulos.getPrecioArticulo(),                             
                        Articulos.getIdTalla(),
                        Articulos.isActivoArticulo(),
                        s                       
                        });                        
            }            
        }
        
        int filas = Tbl_Articulo.getRowCount();               
        
        if(filas == 0)
        {
            JOptionPane.showMessageDialog(null, "No existen artículos con ese nombre.","¡Aviso!", JOptionPane.WARNING_MESSAGE);
        }        
    }
    
    private void seleccionCBox()
    {
        Object seleccion = CBox_Filtro.getSelectedItem();
        
        if(seleccion.equals("ID"))
        {
            Btn_Buscar.setEnabled(true); 
            Txt_Campo.setEnabled(true);
        }else if(seleccion.equals("Nombre")){
            
            Txt_Campo.setText("");
            
            String articuloBuscar = JOptionPane.showInputDialog(null, "Ingrese el nombre del articulo a buscar.", "Articulo", JOptionPane.OK_CANCEL_OPTION);            
            
            String busquedaNombre = articuloBuscar;
            
            if(busquedaNombre.equals(""))
            {
                JOptionPane.showMessageDialog(null, "Debe ingresar un nombre de artículo para buscar.","Error!", JOptionPane.ERROR_MESSAGE);                
            }else{
                consultarNombreArt(busquedaNombre);                
            }                                  
        }
    }
    
    /**
     * 
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FmrArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FmrArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FmrArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FmrArticulos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FmrArticulos().setVisible(true);
            }
        });   
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Activar_Desactivar;
    private javax.swing.JButton Btn_Añadir;
    private javax.swing.JButton Btn_Buscar;
    private javax.swing.JButton Btn_Editar;
    private javax.swing.JButton Btn_Limpiar;
    private javax.swing.JButton Btn_Regresar;
    private javax.swing.JComboBox<String> CBox_Filtro;
    private javax.swing.JComboBox<String> ComboTalla;
    private javax.swing.JTable Tbl_Articulo;
    private javax.swing.JTextField Txt_Activo;
    private javax.swing.JTextField Txt_Campo;
    private javax.swing.JTextField Txt_DescripcionArticulo;
    private javax.swing.JTextField Txt_IdArticulo;
    private javax.swing.JTextField Txt_NombreArticulo;
    private javax.swing.JTextField Txt_PrecioArticulo;
    private javax.swing.JTextField Txt_StockAct;
    private javax.swing.JTextField Txt_StockMax;
    private javax.swing.JTextField Txt_StockMin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
  
}
